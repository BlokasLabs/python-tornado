From: Benjamin Drung <benjamin.drung@cloud.ionos.com>
Date: Tue, 18 Dec 2018 18:32:04 +0100
Subject: [PATCH] Rename tornado to tornado4

To make tornado version 5 co-installable with tornado version 4, rename
the older tornado to tornado4.
---
 setup.py                               | 10 ++--
 tornado/_locale_data.py                |  2 +-
 tornado/auth.py                        | 70 ++++++++++++-------------
 tornado/autoreload.py                  | 28 +++++-----
 tornado/concurrent.py                  | 10 ++--
 tornado/curl_httpclient.py             | 12 ++---
 tornado/escape.py                      |  4 +-
 tornado/gen.py                         | 25 ++++-----
 tornado/http1connection.py             | 16 +++---
 tornado/httpclient.py                  | 22 ++++----
 tornado/httpserver.py                  | 42 +++++++--------
 tornado/httputil.py                    | 10 ++--
 tornado/ioloop.py                      | 36 ++++++-------
 tornado/iostream.py                    | 24 ++++-----
 tornado/locale.py                      | 12 ++---
 tornado/locks.py                       | 36 ++++++-------
 tornado/log.py                         | 32 ++++++------
 tornado/netutil.py                     | 24 ++++-----
 tornado/options.py                     | 28 +++++-----
 tornado/platform/asyncio.py            | 26 +++++-----
 tornado/platform/auto.py               | 12 ++---
 tornado/platform/caresresolver.py      |  8 +--
 tornado/platform/common.py             |  4 +-
 tornado/platform/epoll.py              |  2 +-
 tornado/platform/interface.py          |  6 +--
 tornado/platform/kqueue.py             |  2 +-
 tornado/platform/posix.py              |  2 +-
 tornado/platform/select.py             |  2 +-
 tornado/platform/twisted.py            | 56 ++++++++++----------
 tornado/process.py                     | 18 +++----
 tornado/queues.py                      | 22 ++++----
 tornado/routing.py                     | 12 ++---
 tornado/simple_httpclient.py           | 22 ++++----
 tornado/speedups.c                     |  2 +-
 tornado/stack_context.py               |  6 +--
 tornado/tcpclient.py                   | 12 ++---
 tornado/tcpserver.py                   | 32 ++++++------
 tornado/template.py                    | 14 ++---
 tornado/test/__main__.py               |  6 +--
 tornado/test/asyncio_test.py           | 10 ++--
 tornado/test/auth_test.py              | 16 +++---
 tornado/test/concurrent_test.py        | 18 +++----
 tornado/test/curl_httpclient_test.py   | 16 +++---
 tornado/test/escape_test.py            | 10 ++--
 tornado/test/gen_test.py               | 22 ++++----
 tornado/test/http1connection_test.py   | 12 ++---
 tornado/test/httpclient_test.py        | 26 +++++-----
 tornado/test/httpserver_test.py        | 28 +++++-----
 tornado/test/httputil_test.py          | 10 ++--
 tornado/test/import_test.py            | 56 ++++++++++----------
 tornado/test/ioloop_test.py            | 14 ++---
 tornado/test/iostream_test.py          | 26 +++++-----
 tornado/test/locale_test.py            | 44 ++++++++--------
 tornado/test/locks_test.py             |  8 +--
 tornado/test/log_test.py               | 14 ++---
 tornado/test/netutil_test.py           | 14 ++---
 tornado/test/options_test.py           |  6 +--
 tornado/test/process_test.py           | 18 +++----
 tornado/test/queues_test.py            |  8 +--
 tornado/test/resolve_test_helper.py    |  4 +-
 tornado/test/routing_test.py           | 20 ++++----
 tornado/test/runtests.py               | 94 +++++++++++++++++-----------------
 tornado/test/simple_httpclient_test.py | 28 +++++-----
 tornado/test/stack_context_test.py     | 12 ++---
 tornado/test/tcpclient_test.py         | 14 ++---
 tornado/test/tcpserver_test.py         | 14 ++---
 tornado/test/template_test.py          |  8 +--
 tornado/test/testing_test.py           |  8 +--
 tornado/test/twisted_test.py           | 26 +++++-----
 tornado/test/util.py                   | 10 ++--
 tornado/test/util_test.py              | 16 +++---
 tornado/test/web_test.py               | 34 ++++++------
 tornado/test/websocket_test.py         | 26 +++++-----
 tornado/test/windows_test.py           |  2 +-
 tornado/test/wsgi_test.py              | 16 +++---
 tornado/testing.py                     | 56 ++++++++++----------
 tornado/util.py                        | 12 ++---
 tornado/web.py                         | 68 ++++++++++++------------
 tornado/websocket.py                   | 42 +++++++--------
 tornado/wsgi.py                        | 46 ++++++++---------
 80 files changed, 819 insertions(+), 822 deletions(-)

diff --git a/setup.py b/setup.py
index a475920..24e87b6 100644
--- a/setup.py
+++ b/setup.py
@@ -113,8 +113,8 @@ if (platform.python_implementation() == 'CPython' and
     # This extension builds and works on pypy as well, although pypy's jit
     # produces equivalent performance.
     kwargs['ext_modules'] = [
-        Extension('tornado.speedups',
-                  sources=['tornado/speedups.c']),
+        Extension('tornado4.speedups',
+                  sources=['tornado4/speedups.c']),
     ]
 
     if os.environ.get('TORNADO_EXTENSION') != '1':
@@ -142,14 +142,14 @@ if setuptools is not None:
     kwargs['install_requires'] = install_requires
 
 setup(
-    name="tornado",
+    name="tornado4",
     version=version,
-    packages=["tornado", "tornado.test", "tornado.platform"],
+    packages=["tornado4", "tornado4.test", "tornado4.platform"],
     package_data={
         # data files need to be listed both here (which determines what gets
         # installed) and in MANIFEST.in (which determines what gets included
         # in the sdist tarball)
-        "tornado.test": [
+        "tornado4.test": [
             "README",
             "csv_translations/fr_FR.csv",
             "gettext_translations/fr_FR/LC_MESSAGES/tornado_test.mo",
diff --git a/tornado/_locale_data.py b/tornado/_locale_data.py
index 6fa2c29..20fdc60 100644
--- a/tornado/_locale_data.py
+++ b/tornado/_locale_data.py
@@ -15,7 +15,7 @@
 # License for the specific language governing permissions and limitations
 # under the License.
 
-"""Data used by the tornado.locale module."""
+"""Data used by the tornado4.locale module."""
 
 from __future__ import absolute_import, division, print_function
 
diff --git a/tornado/auth.py b/tornado/auth.py
index f02d289..221242d 100644
--- a/tornado/auth.py
+++ b/tornado/auth.py
@@ -18,7 +18,7 @@
 authentication schemes.
 
 All the classes in this file are class mixins designed to be used with
-the `tornado.web.RequestHandler` class.  They are used in two ways:
+the `tornado4.web.RequestHandler` class.  They are used in two ways:
 
 * On a login handler, use methods such as ``authenticate_redirect()``,
   ``authorize_redirect()``, and ``get_authenticated_user()`` to
@@ -36,9 +36,9 @@ Example usage for Google OAuth:
 
 .. testcode::
 
-    class GoogleOAuth2LoginHandler(tornado.web.RequestHandler,
-                                   tornado.auth.GoogleOAuth2Mixin):
-        @tornado.gen.coroutine
+    class GoogleOAuth2LoginHandler(tornado4.web.RequestHandler,
+                                   tornado4.auth.GoogleOAuth2Mixin):
+        @tornado4.gen.coroutine
         def get(self):
             if self.get_argument('code', False):
                 user = yield self.get_authenticated_user(
@@ -75,14 +75,14 @@ import hmac
 import time
 import uuid
 
-from tornado.concurrent import TracebackFuture, return_future, chain_future
-from tornado import gen
-from tornado import httpclient
-from tornado import escape
-from tornado.httputil import url_concat
-from tornado.log import gen_log
-from tornado.stack_context import ExceptionStackContext
-from tornado.util import unicode_type, ArgReplacer, PY3
+from tornado4.concurrent import TracebackFuture, return_future, chain_future
+from tornado4 import gen
+from tornado4 import httpclient
+from tornado4 import escape
+from tornado4.httputil import url_concat
+from tornado4.log import gen_log
+from tornado4.stack_context import ExceptionStackContext
+from tornado4.util import unicode_type, ArgReplacer, PY3
 
 if PY3:
     import urllib.parse as urlparse
@@ -107,7 +107,7 @@ def _auth_future_to_callback(callback, future):
 
 
 def _auth_return_future(f):
-    """Similar to tornado.concurrent.return_future, but uses the auth
+    """Similar to tornado4.concurrent.return_future, but uses the auth
     module's legacy callback interface.
 
     Note that when using this decorator the ``callback`` parameter
@@ -626,10 +626,10 @@ class OAuth2Mixin(object):
 
         ..testcode::
 
-            class MainHandler(tornado.web.RequestHandler,
-                              tornado.auth.FacebookGraphMixin):
-                @tornado.web.authenticated
-                @tornado.gen.coroutine
+            class MainHandler(tornado4.web.RequestHandler,
+                              tornado4.auth.FacebookGraphMixin):
+                @tornado4.web.authenticated
+                @tornado4.gen.coroutine
                 def get(self):
                     new_entry = yield self.oauth2_request(
                         "https://graph.facebook.com/me/feed",
@@ -687,7 +687,7 @@ class TwitterMixin(OAuthMixin):
     To authenticate with Twitter, register your application with
     Twitter at http://twitter.com/apps. Then copy your Consumer Key
     and Consumer Secret to the application
-    `~tornado.web.Application.settings` ``twitter_consumer_key`` and
+    `~tornado4.web.Application.settings` ``twitter_consumer_key`` and
     ``twitter_consumer_secret``. Use this mixin on the handler for the
     URL you registered as your application's callback URL.
 
@@ -696,9 +696,9 @@ class TwitterMixin(OAuthMixin):
 
     .. testcode::
 
-        class TwitterLoginHandler(tornado.web.RequestHandler,
-                                  tornado.auth.TwitterMixin):
-            @tornado.gen.coroutine
+        class TwitterLoginHandler(tornado4.web.RequestHandler,
+                                  tornado4.auth.TwitterMixin):
+            @tornado4.gen.coroutine
             def get(self):
                 if self.get_argument("oauth_token", None):
                     user = yield self.get_authenticated_user()
@@ -761,10 +761,10 @@ class TwitterMixin(OAuthMixin):
 
         .. testcode::
 
-            class MainHandler(tornado.web.RequestHandler,
-                              tornado.auth.TwitterMixin):
-                @tornado.web.authenticated
-                @tornado.gen.coroutine
+            class MainHandler(tornado4.web.RequestHandler,
+                              tornado4.auth.TwitterMixin):
+                @tornado4.web.authenticated
+                @tornado4.gen.coroutine
                 def get(self):
                     new_entry = yield self.twitter_request(
                         "/statuses/update",
@@ -870,9 +870,9 @@ class GoogleOAuth2Mixin(OAuth2Mixin):
 
         .. testcode::
 
-            class GoogleOAuth2LoginHandler(tornado.web.RequestHandler,
-                                           tornado.auth.GoogleOAuth2Mixin):
-                @tornado.gen.coroutine
+            class GoogleOAuth2LoginHandler(tornado4.web.RequestHandler,
+                                           tornado4.auth.GoogleOAuth2Mixin):
+                @tornado4.gen.coroutine
                 def get(self):
                     if self.get_argument('code', False):
                         access = yield self.get_authenticated_user(
@@ -934,9 +934,9 @@ class FacebookGraphMixin(OAuth2Mixin):
 
         .. testcode::
 
-            class FacebookGraphLoginHandler(tornado.web.RequestHandler,
-                                            tornado.auth.FacebookGraphMixin):
-              @tornado.gen.coroutine
+            class FacebookGraphLoginHandler(tornado4.web.RequestHandler,
+                                            tornado4.auth.FacebookGraphMixin):
+              @tornado4.gen.coroutine
               def get(self):
                   if self.get_argument("code", False):
                       user = yield self.get_authenticated_user(
@@ -1047,10 +1047,10 @@ class FacebookGraphMixin(OAuth2Mixin):
 
         ..testcode::
 
-            class MainHandler(tornado.web.RequestHandler,
-                              tornado.auth.FacebookGraphMixin):
-                @tornado.web.authenticated
-                @tornado.gen.coroutine
+            class MainHandler(tornado4.web.RequestHandler,
+                              tornado4.auth.FacebookGraphMixin):
+                @tornado4.web.authenticated
+                @tornado4.gen.coroutine
                 def get(self):
                     new_entry = yield self.facebook_request(
                         "/me/feed",
diff --git a/tornado/autoreload.py b/tornado/autoreload.py
index 60571ef..8562ab4 100644
--- a/tornado/autoreload.py
+++ b/tornado/autoreload.py
@@ -18,7 +18,7 @@
 
 Most applications should not access this module directly.  Instead,
 pass the keyword argument ``autoreload=True`` to the
-`tornado.web.Application` constructor (or ``debug=True``, which
+`tornado4.web.Application` constructor (or ``debug=True``, which
 enables this setting and several others).  This will enable autoreload
 mode as well as checking for changes to templates and static
 resources.  Note that restarting is a destructive operation and any
@@ -65,14 +65,14 @@ import sys
 #
 # We address the former problem by setting the $PYTHONPATH environment
 # variable before re-execution so the new process will see the correct
-# path.  We attempt to address the latter problem when tornado.autoreload
+# path.  We attempt to address the latter problem when tornado4.autoreload
 # is run as __main__, although we can't fix the general case because
 # we cannot reliably reconstruct the original command line
 # (http://bugs.python.org/issue14208).
 
 if __name__ == "__main__":
     # This sys.path manipulation must come before our imports (as much
-    # as possible - if we introduced a tornado.sys or tornado.os
+    # as possible - if we introduced a tornado4.sys or tornado4.os
     # module we'd be in trouble), or else our imports would become
     # relative again despite the future import.
     #
@@ -90,10 +90,10 @@ import types
 import subprocess
 import weakref
 
-from tornado import ioloop
-from tornado.log import gen_log
-from tornado import process
-from tornado.util import exec_in
+from tornado4 import ioloop
+from tornado4.log import gen_log
+from tornado4 import process
+from tornado4.util import exec_in
 
 try:
     import signal
@@ -122,7 +122,7 @@ def start(io_loop=None, check_time=500):
         return
     _io_loops[io_loop] = True
     if len(_io_loops) > 1:
-        gen_log.warning("tornado.autoreload started more than once in the same process")
+        gen_log.warning("tornado4.autoreload started more than once in the same process")
     modify_times = {}
     callback = functools.partial(_reload_on_update, modify_times)
     scheduler = ioloop.PeriodicCallback(callback, check_time, io_loop=io_loop)
@@ -154,7 +154,7 @@ def add_reload_hook(fn):
 
     Note that for open file and socket handles it is generally
     preferable to set the ``FD_CLOEXEC`` flag (using `fcntl` or
-    ``tornado.platform.auto.set_close_exec``) instead
+    ``tornado4.platform.auto.set_close_exec``) instead
     of using a reload hook to close them.
     """
     _reload_hooks.append(fn)
@@ -246,8 +246,8 @@ def _reload():
 
 _USAGE = """\
 Usage:
-  python -m tornado.autoreload -m module.to.run [args...]
-  python -m tornado.autoreload path/to/script.py [args...]
+  python -m tornado4.autoreload -m module.to.run [args...]
+  python -m tornado4.autoreload path/to/script.py [args...]
 """
 
 
@@ -256,11 +256,11 @@ def main():
 
     Scripts may be specified by filename or module name::
 
-        python -m tornado.autoreload -m tornado.test.runtests
-        python -m tornado.autoreload tornado/test/runtests.py
+        python -m tornado4.autoreload -m tornado4.test.runtests
+        python -m tornado4.autoreload tornado/test/runtests.py
 
     Running a script with this wrapper is similar to calling
-    `tornado.autoreload.wait` at the end of the script, but this wrapper
+    `tornado4.autoreload.wait` at the end of the script, but this wrapper
     can catch import-time problems like syntax errors that would otherwise
     prevent the script from reaching its call to `wait`.
     """
diff --git a/tornado/concurrent.py b/tornado/concurrent.py
index 667e6b1..1483fb5 100644
--- a/tornado/concurrent.py
+++ b/tornado/concurrent.py
@@ -29,9 +29,9 @@ import textwrap
 import traceback
 import sys
 
-from tornado.log import app_log
-from tornado.stack_context import ExceptionStackContext, wrap
-from tornado.util import raise_exc_info, ArgReplacer, is_finalizing
+from tornado4.log import app_log
+from tornado4.stack_context import ExceptionStackContext, wrap
+from tornado4.util import raise_exc_info, ArgReplacer, is_finalizing
 
 try:
     from concurrent import futures
@@ -138,7 +138,7 @@ class Future(object):
     Tornado they are normally used with `.IOLoop.add_future` or by
     yielding them in a `.gen.coroutine`.
 
-    `tornado.concurrent.Future` is similar to
+    `tornado4.concurrent.Future` is similar to
     `concurrent.futures.Future`, but not thread-safe (and therefore
     faster for use with single-threaded event loops).
 
@@ -150,7 +150,7 @@ class Future(object):
     ``TracebackFuture``, which is now a deprecated alias for this class.
 
     .. versionchanged:: 4.0
-       `tornado.concurrent.Future` is always a thread-unsafe ``Future``
+       `tornado4.concurrent.Future` is always a thread-unsafe ``Future``
        with support for the ``exc_info`` methods.  Previously it would
        be an alias for the thread-safe `concurrent.futures.Future`
        if that package was available and fall back to the thread-unsafe
diff --git a/tornado/curl_httpclient.py b/tornado/curl_httpclient.py
index 8558d65..6e81ab5 100644
--- a/tornado/curl_httpclient.py
+++ b/tornado/curl_httpclient.py
@@ -26,14 +26,14 @@ import threading
 import time
 from io import BytesIO
 
-from tornado import httputil
-from tornado import ioloop
-from tornado import stack_context
+from tornado4 import httputil
+from tornado4 import ioloop
+from tornado4 import stack_context
 
-from tornado.escape import utf8, native_str
-from tornado.httpclient import HTTPResponse, HTTPError, AsyncHTTPClient, main
+from tornado4.escape import utf8, native_str
+from tornado4.httpclient import HTTPResponse, HTTPError, AsyncHTTPClient, main
 
-curl_log = logging.getLogger('tornado.curl_httpclient')
+curl_log = logging.getLogger('tornado4.curl_httpclient')
 
 
 class CurlAsyncHTTPClient(AsyncHTTPClient):
diff --git a/tornado/escape.py b/tornado/escape.py
index 2ca3fe3..c588ec9 100644
--- a/tornado/escape.py
+++ b/tornado/escape.py
@@ -25,7 +25,7 @@ from __future__ import absolute_import, division, print_function
 import json
 import re
 
-from tornado.util import PY3, unicode_type, basestring_type
+from tornado4.util import PY3, unicode_type, basestring_type
 
 if PY3:
     from urllib.parse import parse_qs as _parse_qs
@@ -272,7 +272,7 @@ def recursive_unicode(obj):
 # but it gets all exponential on certain patterns (such as too many trailing
 # dots), causing the regex matcher to never return.
 # This regex should avoid those problems.
-# Use to_unicode instead of tornado.util.u - we don't want backslashes getting
+# Use to_unicode instead of tornado4.util.u - we don't want backslashes getting
 # processed as escapes.
 _URL_RE = re.compile(to_unicode(r"""\b((?:([\w-]+):(/{1,3})|www[.])(?:(?:(?:[^\s&()]|&amp;|&quot;)*(?:[^!"#$%&'()*+,.:;<=>?@\[\]^`{|}~\s]))|(?:\((?:[^\s&()]|&amp;|&quot;)*\)))+)"""))
 
diff --git a/tornado/gen.py b/tornado/gen.py
index bdb32ff..4012cab 100644
--- a/tornado/gen.py
+++ b/tornado/gen.py
@@ -1,4 +1,4 @@
-"""``tornado.gen`` is a generator-based interface to make it easier to
+"""``tornado4.gen`` is a generator-based interface to make it easier to
 work in an asynchronous environment.  Code using the ``gen`` module
 is technically asynchronous, but it is written as a single generator
 instead of a collection of separate functions.
@@ -63,7 +63,7 @@ Python 3.4, available via the `singledispatch
 <https://pypi.python.org/pypi/singledispatch>`_ package on older
 versions), additional types of objects may be yielded. Tornado includes
 support for ``asyncio.Future`` and Twisted's ``Deferred`` class when
-``tornado.platform.asyncio`` and ``tornado.platform.twisted`` are imported.
+``tornado4.platform.asyncio`` and ``tornado4.platform.twisted`` are imported.
 See the `convert_yielded` function to extend this mechanism.
 
 .. versionchanged:: 3.2
@@ -85,11 +85,11 @@ import textwrap
 import types
 import weakref
 
-from tornado.concurrent import Future, TracebackFuture, is_future, chain_future
-from tornado.ioloop import IOLoop
-from tornado.log import app_log
-from tornado import stack_context
-from tornado.util import PY3, raise_exc_info
+from tornado4.concurrent import Future, TracebackFuture, is_future, chain_future
+from tornado4.ioloop import IOLoop
+from tornado4.log import app_log
+from tornado4 import stack_context
+from tornado4.util import PY3, raise_exc_info
 
 try:
     try:
@@ -187,7 +187,7 @@ def engine(func):
     In most cases, functions decorated with `engine` should take
     a ``callback`` argument and invoke it with their result when
     they are finished.  One notable exception is the
-    `~tornado.web.RequestHandler` :ref:`HTTP verb methods <verbs>`,
+    `~tornado4.web.RequestHandler` :ref:`HTTP verb methods <verbs>`,
     which use ``self.finish()`` in place of a callback argument.
     """
     func = _make_coroutine_wrapper(func, replace_callback=False)
@@ -973,7 +973,7 @@ moment.set_result(None)
 
 
 class Runner(object):
-    """Internal implementation of `tornado.gen.engine`.
+    """Internal implementation of `tornado4.gen.engine`.
 
     Maintains information about pending callbacks and their results.
 
@@ -1265,7 +1265,7 @@ def convert_yielded(yielded):
 
         @convert_yielded.register(asyncio.Future)
         def _(asyncio_future):
-            return tornado.platform.asyncio.to_tornado_future(asyncio_future)
+            return tornado4.platform.asyncio.to_tornado_future(asyncio_future)
 
     .. versionadded:: 4.1
     """
@@ -1294,9 +1294,6 @@ if singledispatch is not None:
         # to work unless the application also configures AsyncIOLoop,
         # but at least the error messages in that case are more
         # comprehensible than a stack overflow.
-        import tornado.platform.asyncio
+        import tornado4.platform.asyncio
     except ImportError:
         pass
-    else:
-        # Reference the imported module to make pyflakes happy.
-        tornado
diff --git a/tornado/http1connection.py b/tornado/http1connection.py
index 32bed6c..6d36ae7 100644
--- a/tornado/http1connection.py
+++ b/tornado/http1connection.py
@@ -23,14 +23,14 @@ from __future__ import absolute_import, division, print_function
 
 import re
 
-from tornado.concurrent import Future
-from tornado.escape import native_str, utf8
-from tornado import gen
-from tornado import httputil
-from tornado import iostream
-from tornado.log import gen_log, app_log
-from tornado import stack_context
-from tornado.util import GzipDecompressor, PY3
+from tornado4.concurrent import Future
+from tornado4.escape import native_str, utf8
+from tornado4 import gen
+from tornado4 import httputil
+from tornado4 import iostream
+from tornado4.log import gen_log, app_log
+from tornado4 import stack_context
+from tornado4.util import GzipDecompressor, PY3
 
 
 class _QuietException(Exception):
diff --git a/tornado/httpclient.py b/tornado/httpclient.py
index 8436ece..00f56e9 100644
--- a/tornado/httpclient.py
+++ b/tornado/httpclient.py
@@ -35,7 +35,7 @@ and comments in curl_httpclient.py).
 
 To select ``curl_httpclient``, call `AsyncHTTPClient.configure` at startup::
 
-    AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
+    AsyncHTTPClient.configure("tornado4.curl_httpclient.CurlAsyncHTTPClient")
 """
 
 from __future__ import absolute_import, division, print_function
@@ -44,11 +44,11 @@ import functools
 import time
 import weakref
 
-from tornado.concurrent import TracebackFuture
-from tornado.escape import utf8, native_str
-from tornado import httputil, stack_context
-from tornado.ioloop import IOLoop
-from tornado.util import Configurable
+from tornado4.concurrent import TracebackFuture
+from tornado4.escape import utf8, native_str
+from tornado4 import httputil, stack_context
+from tornado4.ioloop import IOLoop
+from tornado4.util import Configurable
 
 
 class HTTPClient(object):
@@ -146,7 +146,7 @@ class AsyncHTTPClient(Configurable):
 
     @classmethod
     def configurable_default(cls):
-        from tornado.simple_httpclient import SimpleAsyncHTTPClient
+        from tornado4.simple_httpclient import SimpleAsyncHTTPClient
         return SimpleAsyncHTTPClient
 
     @classmethod
@@ -281,7 +281,7 @@ class AsyncHTTPClient(Configurable):
 
         Example::
 
-           AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
+           AsyncHTTPClient.configure("tornado4.curl_httpclient.CurlAsyncHTTPClient")
         """
         super(AsyncHTTPClient, cls).configure(impl, **kwargs)
 
@@ -321,7 +321,7 @@ class HTTPRequest(object):
         :arg string url: URL to fetch
         :arg string method: HTTP method, e.g. "GET" or "POST"
         :arg headers: Additional HTTP headers to pass on the request
-        :type headers: `~tornado.httputil.HTTPHeaders` or `dict`
+        :type headers: `~tornado4.httputil.HTTPHeaders` or `dict`
         :arg body: HTTP request body as a string (byte or unicode; if unicode
            the utf-8 encoding will be used)
         :arg body_producer: Callable used for lazy/asynchronous request bodies.
@@ -531,7 +531,7 @@ class HTTPResponse(object):
 
     * reason: human-readable reason phrase describing the status code
 
-    * headers: `tornado.httputil.HTTPHeaders` object
+    * headers: `tornado4.httputil.HTTPHeaders` object
 
     * effective_url: final location of the resource after following any
       redirects
@@ -649,7 +649,7 @@ class _RequestProxy(object):
 
 
 def main():
-    from tornado.options import define, options, parse_command_line
+    from tornado4.options import define, options, parse_command_line
     define("print_headers", type=bool, default=False)
     define("print_body", type=bool, default=True)
     define("follow_redirects", type=bool, default=True)
diff --git a/tornado/httpserver.py b/tornado/httpserver.py
index d757be1..3d8c330 100644
--- a/tornado/httpserver.py
+++ b/tornado/httpserver.py
@@ -18,26 +18,26 @@
 
 Typical applications have little direct interaction with the `HTTPServer`
 class except to start a server at the beginning of the process
-(and even that is often done indirectly via `tornado.web.Application.listen`).
+(and even that is often done indirectly via `tornado4.web.Application.listen`).
 
 .. versionchanged:: 4.0
 
    The ``HTTPRequest`` class that used to live in this module has been moved
-   to `tornado.httputil.HTTPServerRequest`.  The old name remains as an alias.
+   to `tornado4.httputil.HTTPServerRequest`.  The old name remains as an alias.
 """
 
 from __future__ import absolute_import, division, print_function
 
 import socket
 
-from tornado.escape import native_str
-from tornado.http1connection import HTTP1ServerConnection, HTTP1ConnectionParameters
-from tornado import gen
-from tornado import httputil
-from tornado import iostream
-from tornado import netutil
-from tornado.tcpserver import TCPServer
-from tornado.util import Configurable
+from tornado4.escape import native_str
+from tornado4.http1connection import HTTP1ServerConnection, HTTP1ConnectionParameters
+from tornado4 import gen
+from tornado4 import httputil
+from tornado4 import iostream
+from tornado4 import netutil
+from tornado4.tcpserver import TCPServer
+from tornado4.util import Configurable
 
 
 class HTTPServer(TCPServer, Configurable,
@@ -47,7 +47,7 @@ class HTTPServer(TCPServer, Configurable,
     A server is defined by a subclass of `.HTTPServerConnectionDelegate`,
     or, for backwards compatibility, a callback that takes an
     `.HTTPServerRequest` as an argument. The delegate is usually a
-    `tornado.web.Application`.
+    `tornado4.web.Application`.
 
     `HTTPServer` supports keep-alive connections by default
     (automatically for HTTP/1.1, or for HTTP/1.0 when the client
@@ -80,18 +80,18 @@ class HTTPServer(TCPServer, Configurable,
        HTTPServer(applicaton, ssl_options=ssl_ctx)
 
     `HTTPServer` initialization follows one of three patterns (the
-    initialization methods are defined on `tornado.tcpserver.TCPServer`):
+    initialization methods are defined on `tornado4.tcpserver.TCPServer`):
 
-    1. `~tornado.tcpserver.TCPServer.listen`: simple single-process::
+    1. `~tornado4.tcpserver.TCPServer.listen`: simple single-process::
 
             server = HTTPServer(app)
             server.listen(8888)
             IOLoop.current().start()
 
-       In many cases, `tornado.web.Application.listen` can be used to avoid
+       In many cases, `tornado4.web.Application.listen` can be used to avoid
        the need to explicitly create the `HTTPServer`.
 
-    2. `~tornado.tcpserver.TCPServer.bind`/`~tornado.tcpserver.TCPServer.start`:
+    2. `~tornado4.tcpserver.TCPServer.bind`/`~tornado4.tcpserver.TCPServer.start`:
        simple multi-process::
 
             server = HTTPServer(app)
@@ -103,20 +103,20 @@ class HTTPServer(TCPServer, Configurable,
        to the `HTTPServer` constructor.  `~.TCPServer.start` will always start
        the server on the default singleton `.IOLoop`.
 
-    3. `~tornado.tcpserver.TCPServer.add_sockets`: advanced multi-process::
+    3. `~tornado4.tcpserver.TCPServer.add_sockets`: advanced multi-process::
 
-            sockets = tornado.netutil.bind_sockets(8888)
-            tornado.process.fork_processes(0)
+            sockets = tornado4.netutil.bind_sockets(8888)
+            tornado4.process.fork_processes(0)
             server = HTTPServer(app)
             server.add_sockets(sockets)
             IOLoop.current().start()
 
        The `~.TCPServer.add_sockets` interface is more complicated,
-       but it can be used with `tornado.process.fork_processes` to
+       but it can be used with `tornado4.process.fork_processes` to
        give you more flexibility in when the fork happens.
        `~.TCPServer.add_sockets` can also be used in single-process
        servers if you want to create your listening sockets in some
-       way other than `tornado.netutil.bind_sockets`.
+       way other than `tornado4.netutil.bind_sockets`.
 
     .. versionchanged:: 4.0
        Added ``decompress_request``, ``chunk_size``, ``max_header_size``,
@@ -130,7 +130,7 @@ class HTTPServer(TCPServer, Configurable,
        documentation) instead of one ``(request_conn)``.
 
     .. versionchanged:: 4.2
-       `HTTPServer` is now a subclass of `tornado.util.Configurable`.
+       `HTTPServer` is now a subclass of `tornado4.util.Configurable`.
 
     .. versionchanged:: 4.5
        Added the ``trusted_downstream`` argument.
diff --git a/tornado/httputil.py b/tornado/httputil.py
index 818ea91..b946978 100644
--- a/tornado/httputil.py
+++ b/tornado/httputil.py
@@ -17,7 +17,7 @@
 """HTTP utility code shared by clients and servers.
 
 This module also defines the `HTTPServerRequest` class which is exposed
-via `tornado.web.RequestHandler.request`.
+via `tornado4.web.RequestHandler.request`.
 """
 
 from __future__ import absolute_import, division, print_function
@@ -31,9 +31,9 @@ import numbers
 import re
 import time
 
-from tornado.escape import native_str, parse_qs_bytes, utf8
-from tornado.log import gen_log
-from tornado.util import ObjectDict, PY3
+from tornado4.escape import native_str, parse_qs_bytes, utf8
+from tornado4.log import gen_log
+from tornado4.util import ObjectDict, PY3
 
 if PY3:
     import http.cookies as Cookie
@@ -335,7 +335,7 @@ class HTTPServerRequest(object):
        sequentially on a single connection.
 
     .. versionchanged:: 4.0
-       Moved from ``tornado.httpserver.HTTPRequest``.
+       Moved from ``tornado4.httpserver.HTTPRequest``.
     """
     def __init__(self, method=None, uri=None, version="HTTP/1.0", headers=None,
                  body=None, host=None, files=None, connection=None,
diff --git a/tornado/ioloop.py b/tornado/ioloop.py
index ad35787..4b258c5 100644
--- a/tornado/ioloop.py
+++ b/tornado/ioloop.py
@@ -44,11 +44,11 @@ import time
 import traceback
 import math
 
-from tornado.concurrent import TracebackFuture, is_future
-from tornado.log import app_log, gen_log
-from tornado.platform.auto import set_close_exec, Waker
-from tornado import stack_context
-from tornado.util import PY3, Configurable, errno_from_exception, timedelta_to_seconds
+from tornado4.concurrent import TracebackFuture, is_future
+from tornado4.log import app_log, gen_log
+from tornado4.platform.auto import set_close_exec, Waker
+from tornado4 import stack_context
+from tornado4.util import PY3, Configurable, errno_from_exception, timedelta_to_seconds
 
 try:
     import signal
@@ -84,7 +84,7 @@ class IOLoop(Configurable):
 
         import errno
         import functools
-        import tornado.ioloop
+        import tornado4.ioloop
         import socket
 
         def connection_ready(sock, fd, events):
@@ -105,7 +105,7 @@ class IOLoop(Configurable):
             sock.bind(("", port))
             sock.listen(128)
 
-            io_loop = tornado.ioloop.IOLoop.current()
+            io_loop = tornado4.ioloop.IOLoop.current()
             callback = functools.partial(connection_ready, sock)
             io_loop.add_handler(sock.fileno(), callback, io_loop.READ)
             io_loop.start()
@@ -176,7 +176,7 @@ class IOLoop(Configurable):
 
         When using an `IOLoop` subclass, `install` must be called prior
         to creating any objects that implicitly create their own
-        `IOLoop` (e.g., :class:`tornado.httpclient.AsyncHTTPClient`).
+        `IOLoop` (e.g., :class:`tornado4.httpclient.AsyncHTTPClient`).
         """
         assert not IOLoop.initialized()
         IOLoop._instance = self
@@ -240,13 +240,13 @@ class IOLoop(Configurable):
     @classmethod
     def configurable_default(cls):
         if hasattr(select, "epoll"):
-            from tornado.platform.epoll import EPollIOLoop
+            from tornado4.platform.epoll import EPollIOLoop
             return EPollIOLoop
         if hasattr(select, "kqueue"):
             # Python 2.6+ on BSD or Mac
-            from tornado.platform.kqueue import KQueueIOLoop
+            from tornado4.platform.kqueue import KQueueIOLoop
             return KQueueIOLoop
-        from tornado.platform.select import SelectIOLoop
+        from tornado4.platform.select import SelectIOLoop
         return SelectIOLoop
 
     def initialize(self, make_current=None):
@@ -375,7 +375,7 @@ class IOLoop(Configurable):
         """
         if not any([logging.getLogger().handlers,
                     logging.getLogger('tornado').handlers,
-                    logging.getLogger('tornado.application').handlers]):
+                    logging.getLogger('tornado4.application').handlers]):
             logging.basicConfig()
 
     def stop(self):
@@ -416,7 +416,7 @@ class IOLoop(Configurable):
         a maximum duration for the function.  If the timeout expires,
         a `TimeoutError` is raised.
 
-        This method is useful in conjunction with `tornado.gen.coroutine`
+        This method is useful in conjunction with `tornado4.gen.coroutine`
         to allow asynchronous calls in a ``main()`` function::
 
             @gen.coroutine
@@ -435,7 +435,7 @@ class IOLoop(Configurable):
             try:
                 result = func()
                 if result is not None:
-                    from tornado.gen import convert_yielded
+                    from tornado4.gen import convert_yielded
                     result = convert_yielded(result)
             except Exception:
                 future_cell[0] = TracebackFuture()
@@ -604,7 +604,7 @@ class IOLoop(Configurable):
         try:
             ret = callback()
             if ret is not None:
-                from tornado import gen
+                from tornado4 import gen
                 # Functions that return Futures typically swallow all
                 # exceptions and store them in the Future.  If a Future
                 # makes it out to the IOLoop, ensure its exception (if any)
@@ -682,9 +682,9 @@ class IOLoop(Configurable):
 class PollIOLoop(IOLoop):
     """Base class for IOLoops built around a select-like function.
 
-    For concrete implementations, see `tornado.platform.epoll.EPollIOLoop`
-    (Linux), `tornado.platform.kqueue.KQueueIOLoop` (BSD and Mac), or
-    `tornado.platform.select.SelectIOLoop` (all platforms).
+    For concrete implementations, see `tornado4.platform.epoll.EPollIOLoop`
+    (Linux), `tornado4.platform.kqueue.KQueueIOLoop` (BSD and Mac), or
+    `tornado4.platform.select.SelectIOLoop` (all platforms).
     """
     def initialize(self, impl, time_func=None, **kwargs):
         super(PollIOLoop, self).initialize(**kwargs)
diff --git a/tornado/iostream.py b/tornado/iostream.py
index 279e558..c9c34da 100644
--- a/tornado/iostream.py
+++ b/tornado/iostream.py
@@ -34,15 +34,15 @@ import socket
 import sys
 import re
 
-from tornado.concurrent import TracebackFuture
-from tornado import ioloop
-from tornado.log import gen_log, app_log
-from tornado.netutil import ssl_wrap_socket, ssl_match_hostname, SSLCertificateError, _client_ssl_defaults, _server_ssl_defaults
-from tornado import stack_context
-from tornado.util import errno_from_exception
+from tornado4.concurrent import TracebackFuture
+from tornado4 import ioloop
+from tornado4.log import gen_log, app_log
+from tornado4.netutil import ssl_wrap_socket, ssl_match_hostname, SSLCertificateError, _client_ssl_defaults, _server_ssl_defaults
+from tornado4 import stack_context
+from tornado4.util import errno_from_exception
 
 try:
-    from tornado.platform.posix import _set_nonblocking
+    from tornado4.platform.posix import _set_nonblocking
 except ImportError:
     _set_nonblocking = None
 
@@ -999,8 +999,8 @@ class IOStream(BaseIOStream):
 
     .. testcode::
 
-        import tornado.ioloop
-        import tornado.iostream
+        import tornado4.ioloop
+        import tornado4.iostream
         import socket
 
         def send_request():
@@ -1018,13 +1018,13 @@ class IOStream(BaseIOStream):
         def on_body(data):
             print(data)
             stream.close()
-            tornado.ioloop.IOLoop.current().stop()
+            tornado4.ioloop.IOLoop.current().stop()
 
         if __name__ == '__main__':
             s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
-            stream = tornado.iostream.IOStream(s)
+            stream = tornado4.iostream.IOStream(s)
             stream.connect(("friendfeed.com", 80), send_request)
-            tornado.ioloop.IOLoop.current().start()
+            tornado4.ioloop.IOLoop.current().start()
 
     .. testoutput::
        :hide:
diff --git a/tornado/locale.py b/tornado/locale.py
index 7dba10d..dc868d0 100644
--- a/tornado/locale.py
+++ b/tornado/locale.py
@@ -18,10 +18,10 @@
 
 To load a locale and generate a translated string::
 
-    user_locale = tornado.locale.get("es_LA")
+    user_locale = tornado4.locale.get("es_LA")
     print(user_locale.translate("Sign out"))
 
-`tornado.locale.get()` returns the closest matching locale, not necessarily the
+`tornado4.locale.get()` returns the closest matching locale, not necessarily the
 specific locale you requested. You can support pluralization with
 additional arguments to `~Locale.translate()`, e.g.::
 
@@ -49,11 +49,11 @@ import numbers
 import os
 import re
 
-from tornado import escape
-from tornado.log import gen_log
-from tornado.util import PY3
+from tornado4 import escape
+from tornado4.log import gen_log
+from tornado4.util import PY3
 
-from tornado._locale_data import LOCALE_NAMES
+from tornado4._locale_data import LOCALE_NAMES
 
 _default_locale = "en_US"
 _translations = {}  # type: dict
diff --git a/tornado/locks.py b/tornado/locks.py
index 4f9ecf6..8f49665 100644
--- a/tornado/locks.py
+++ b/tornado/locks.py
@@ -16,8 +16,8 @@ from __future__ import absolute_import, division, print_function
 
 import collections
 
-from tornado import gen, ioloop
-from tornado.concurrent import Future
+from tornado4 import gen, ioloop
+from tornado4.concurrent import Future
 
 __all__ = ['Condition', 'Event', 'Semaphore', 'BoundedSemaphore', 'Lock']
 
@@ -54,9 +54,9 @@ class Condition(_TimeoutGarbageCollector):
 
     .. testcode::
 
-        from tornado import gen
-        from tornado.ioloop import IOLoop
-        from tornado.locks import Condition
+        from tornado4 import gen
+        from tornado4.ioloop import IOLoop
+        from tornado4.locks import Condition
 
         condition = Condition()
 
@@ -99,7 +99,7 @@ class Condition(_TimeoutGarbageCollector):
         # Wait up to 1 second.
         yield condition.wait(timeout=datetime.timedelta(seconds=1))
 
-    The method raises `tornado.gen.TimeoutError` if there's no notification
+    The method raises `tornado4.gen.TimeoutError` if there's no notification
     before the deadline.
     """
 
@@ -158,9 +158,9 @@ class Event(object):
 
     .. testcode::
 
-        from tornado import gen
-        from tornado.ioloop import IOLoop
-        from tornado.locks import Event
+        from tornado4 import gen
+        from tornado4.ioloop import IOLoop
+        from tornado4.locks import Event
 
         event = Event()
 
@@ -220,7 +220,7 @@ class Event(object):
     def wait(self, timeout=None):
         """Block until the internal flag is true.
 
-        Returns a Future, which raises `tornado.gen.TimeoutError` after a
+        Returns a Future, which raises `tornado4.gen.TimeoutError` after a
         timeout.
         """
         if timeout is None:
@@ -262,9 +262,9 @@ class Semaphore(_TimeoutGarbageCollector):
 
        from collections import deque
 
-       from tornado import gen
-       from tornado.ioloop import IOLoop
-       from tornado.concurrent import Future
+       from tornado4 import gen
+       from tornado4.ioloop import IOLoop
+       from tornado4.concurrent import Future
 
        # Ensure reliable doctest output: resolve Futures one at a time.
        futures_q = deque([Future() for _ in range(3)])
@@ -282,9 +282,9 @@ class Semaphore(_TimeoutGarbageCollector):
 
     .. testcode:: semaphore
 
-        from tornado import gen
-        from tornado.ioloop import IOLoop
-        from tornado.locks import Semaphore
+        from tornado4 import gen
+        from tornado4.ioloop import IOLoop
+        from tornado4.locks import Semaphore
 
         sem = Semaphore(2)
 
@@ -442,7 +442,7 @@ class Lock(object):
 
     `acquire` supports the context manager protocol in all Python versions:
 
-    >>> from tornado import gen, locks
+    >>> from tornado4 import gen, locks
     >>> lock = locks.Lock()
     >>>
     >>> @gen.coroutine
@@ -480,7 +480,7 @@ class Lock(object):
     def acquire(self, timeout=None):
         """Attempt to lock. Returns a Future.
 
-        Returns a Future, which raises `tornado.gen.TimeoutError` after a
+        Returns a Future, which raises `tornado4.gen.TimeoutError` after a
         timeout.
         """
         return self._block.acquire(timeout)
diff --git a/tornado/log.py b/tornado/log.py
index 654afc0..5303bfd 100644
--- a/tornado/log.py
+++ b/tornado/log.py
@@ -17,15 +17,15 @@
 
 Tornado uses three logger streams:
 
-* ``tornado.access``: Per-request logging for Tornado's HTTP servers (and
+* ``tornado4.access``: Per-request logging for Tornado's HTTP servers (and
   potentially other servers in the future)
-* ``tornado.application``: Logging of errors from application code (i.e.
+* ``tornado4.application``: Logging of errors from application code (i.e.
   uncaught exceptions from callbacks)
-* ``tornado.general``: General-purpose logging, including any errors
+* ``tornado4.general``: General-purpose logging, including any errors
   or warnings from Tornado itself.
 
 These streams may be configured independently using the standard library's
-`logging` module.  For example, you may wish to send ``tornado.access`` logs
+`logging` module.  For example, you may wish to send ``tornado4.access`` logs
 to a separate file for analysis.
 """
 from __future__ import absolute_import, division, print_function
@@ -34,8 +34,8 @@ import logging
 import logging.handlers
 import sys
 
-from tornado.escape import _unicode
-from tornado.util import unicode_type, basestring_type
+from tornado4.escape import _unicode
+from tornado4.util import unicode_type, basestring_type
 
 try:
     import colorama
@@ -48,9 +48,9 @@ except ImportError:
     curses = None
 
 # Logger objects for internal tornado use
-access_log = logging.getLogger("tornado.access")
-app_log = logging.getLogger("tornado.application")
-gen_log = logging.getLogger("tornado.general")
+access_log = logging.getLogger("tornado4.access")
+app_log = logging.getLogger("tornado4.application")
+gen_log = logging.getLogger("tornado4.general")
 
 
 def _stderr_supports_color():
@@ -88,7 +88,7 @@ class LogFormatter(logging.Formatter):
     * Robust against str/bytes encoding problems.
 
     This formatter is enabled automatically by
-    `tornado.options.parse_command_line` or `tornado.options.parse_config_file`
+    `tornado4.options.parse_command_line` or `tornado4.options.parse_config_file`
     (unless ``--logging=none`` is used).
 
     Color support on Windows versions that do not support ANSI color codes is
@@ -208,12 +208,12 @@ class LogFormatter(logging.Formatter):
 def enable_pretty_logging(options=None, logger=None):
     """Turns on formatted logging output as configured.
 
-    This is called automatically by `tornado.options.parse_command_line`
-    and `tornado.options.parse_config_file`.
+    This is called automatically by `tornado4.options.parse_command_line`
+    and `tornado4.options.parse_config_file`.
     """
     if options is None:
-        import tornado.options
-        options = tornado.options.options
+        import tornado4.options
+        options = tornado4.options.options
     if options.logging is None or options.logging.lower() == 'none':
         return
     if logger is None:
@@ -258,8 +258,8 @@ def define_logging_options(options=None):
     """
     if options is None:
         # late import to prevent cycle
-        import tornado.options
-        options = tornado.options.options
+        import tornado4.options
+        options = tornado4.options.options
     options.define("logging", default="info",
                    help=("Set the Python log level. If 'none', tornado won't touch the "
                          "logging configuration."),
diff --git a/tornado/netutil.py b/tornado/netutil.py
index b0e49fc..2acc84a 100644
--- a/tornado/netutil.py
+++ b/tornado/netutil.py
@@ -24,10 +24,10 @@ import sys
 import socket
 import stat
 
-from tornado.concurrent import dummy_executor, run_on_executor
-from tornado.ioloop import IOLoop
-from tornado.platform.auto import set_close_exec
-from tornado.util import PY3, Configurable, errno_from_exception
+from tornado4.concurrent import dummy_executor, run_on_executor
+from tornado4.ioloop import IOLoop
+from tornado4.platform.auto import set_close_exec
+from tornado4.util import PY3, Configurable, errno_from_exception
 
 try:
     import ssl
@@ -306,15 +306,15 @@ class Resolver(Configurable):
     chosen with the `Resolver.configure <.Configurable.configure>`
     class method::
 
-        Resolver.configure('tornado.netutil.ThreadedResolver')
+        Resolver.configure('tornado4.netutil.ThreadedResolver')
 
     The implementations of this interface included with Tornado are
 
-    * `tornado.netutil.BlockingResolver`
-    * `tornado.netutil.ThreadedResolver`
-    * `tornado.netutil.OverrideResolver`
-    * `tornado.platform.twisted.TwistedResolver`
-    * `tornado.platform.caresresolver.CaresResolver`
+    * `tornado4.netutil.BlockingResolver`
+    * `tornado4.netutil.ThreadedResolver`
+    * `tornado4.netutil.OverrideResolver`
+    * `tornado4.platform.twisted.TwistedResolver`
+    * `tornado4.platform.caresresolver.CaresResolver`
     """
     @classmethod
     def configurable_base(cls):
@@ -413,7 +413,7 @@ class ThreadedResolver(ExecutorResolver):
 
     The thread pool size can be configured with::
 
-        Resolver.configure('tornado.netutil.ThreadedResolver',
+        Resolver.configure('tornado4.netutil.ThreadedResolver',
                            num_threads=10)
 
     .. versionchanged:: 3.1
@@ -519,7 +519,7 @@ def ssl_wrap_socket(socket, ssl_options, server_hostname=None, **kwargs):
         if server_hostname is not None and getattr(ssl, 'HAS_SNI'):
             # Python doesn't have server-side SNI support so we can't
             # really unittest this, but it can be manually tested with
-            # python3.2 -m tornado.httpclient https://sni.velox.ch
+            # python3.2 -m tornado4.httpclient https://sni.velox.ch
             return context.wrap_socket(socket, server_hostname=server_hostname,
                                        **kwargs)
         else:
diff --git a/tornado/options.py b/tornado/options.py
index 707fbd3..0e19b5a 100644
--- a/tornado/options.py
+++ b/tornado/options.py
@@ -19,7 +19,7 @@
 Each module defines its own options which are added to the global
 option namespace, e.g.::
 
-    from tornado.options import define, options
+    from tornado4.options import define, options
 
     define("mysql_host", default="127.0.0.1:3306", help="Main user DB")
     define("memcache_hosts", default="127.0.0.1:11011", multiple=True,
@@ -37,15 +37,15 @@ must have been imported before the command line is parsed.
 Your ``main()`` method can parse the command line or parse a config file with
 either::
 
-    tornado.options.parse_command_line()
+    tornado4.options.parse_command_line()
     # or
-    tornado.options.parse_config_file("/etc/server.conf")
+    tornado4.options.parse_config_file("/etc/server.conf")
 
 .. note:
 
-   When using tornado.options.parse_command_line or
-   tornado.options.parse_config_file, the only options that are set are
-   ones that were previously defined with tornado.options.define.
+   When using tornado4.options.parse_command_line or
+   tornado4.options.parse_config_file, the only options that are set are
+   ones that were previously defined with tornado4.options.define.
 
 Command line formats are what you would expect (``--myoption=myvalue``).
 Config files are just Python files. Global names become options, e.g.::
@@ -58,7 +58,7 @@ We support `datetimes <datetime.datetime>`, `timedeltas
 `define`). We also accept multi-value options. See the documentation for
 `define()` below.
 
-`tornado.options.options` is a singleton instance of `OptionParser`, and
+`tornado4.options.options` is a singleton instance of `OptionParser`, and
 the top-level functions in this module (`define`, `parse_command_line`, etc)
 simply call methods on it.  You may create additional `OptionParser`
 instances to define isolated sets of options, such as for subcommands.
@@ -71,7 +71,7 @@ instances to define isolated sets of options, such as for subcommands.
    alone so you can manage it yourself, either pass ``--logging=none``
    on the command line or do the following to disable it in code::
 
-       from tornado.options import options, parse_command_line
+       from tornado4.options import options, parse_command_line
        options.logging = None
        parse_command_line()
 
@@ -91,10 +91,10 @@ import sys
 import os
 import textwrap
 
-from tornado.escape import _unicode, native_str
-from tornado.log import define_logging_options
-from tornado import stack_context
-from tornado.util import basestring_type, exec_in
+from tornado4.escape import _unicode, native_str
+from tornado4.log import define_logging_options
+from tornado4 import stack_context
+from tornado4.util import basestring_type, exec_in
 
 
 class Error(Exception):
@@ -105,7 +105,7 @@ class Error(Exception):
 class OptionParser(object):
     """A collection of options, a dictionary with object-like access.
 
-    Normally accessed via static functions in the `tornado.options` module,
+    Normally accessed via static functions in the `tornado4.options` module,
     which reference a global instance.
     """
     def __init__(self):
@@ -162,7 +162,7 @@ class OptionParser(object):
 
         Useful for copying options into Application settings::
 
-            from tornado.options import define, parse_command_line, options
+            from tornado4.options import define, parse_command_line, options
 
             define('template_path', group='application')
             define('static_path', group='application')
diff --git a/tornado/platform/asyncio.py b/tornado/platform/asyncio.py
index 830ee1f..1e16180 100644
--- a/tornado/platform/asyncio.py
+++ b/tornado/platform/asyncio.py
@@ -22,10 +22,10 @@ loops.
 from __future__ import absolute_import, division, print_function
 import functools
 
-import tornado.concurrent
-from tornado.gen import convert_yielded
-from tornado.ioloop import IOLoop
-from tornado import stack_context
+import tornado4.concurrent
+from tornado4.gen import convert_yielded
+from tornado4.ioloop import IOLoop
+from tornado4 import stack_context
 
 try:
     # Import the real asyncio module for py33+ first.  Older versions of the
@@ -156,12 +156,12 @@ class AsyncIOMainLoop(BaseAsyncIOLoop):
     current ``asyncio`` event loop (i.e. the one returned by
     ``asyncio.get_event_loop()``).  Recommended usage::
 
-        from tornado.platform.asyncio import AsyncIOMainLoop
+        from tornado4.platform.asyncio import AsyncIOMainLoop
         import asyncio
         AsyncIOMainLoop().install()
         asyncio.get_event_loop().run_forever()
 
-    See also :meth:`tornado.ioloop.IOLoop.install` for general notes on
+    See also :meth:`tornado4.ioloop.IOLoop.install` for general notes on
     installing alternative IOLoops.
     """
     def initialize(self, **kwargs):
@@ -175,8 +175,8 @@ class AsyncIOLoop(BaseAsyncIOLoop):
     ``IOLoops``; these loops are not necessarily related to the
     ``asyncio`` default event loop.  Recommended usage::
 
-        from tornado.ioloop import IOLoop
-        IOLoop.configure('tornado.platform.asyncio.AsyncIOLoop')
+        from tornado4.ioloop import IOLoop
+        IOLoop.configure('tornado4.platform.asyncio.AsyncIOLoop')
         IOLoop.current().start()
 
     Each ``AsyncIOLoop`` creates a new ``asyncio.EventLoop``; this object
@@ -194,12 +194,12 @@ class AsyncIOLoop(BaseAsyncIOLoop):
 
 
 def to_tornado_future(asyncio_future):
-    """Convert an `asyncio.Future` to a `tornado.concurrent.Future`.
+    """Convert an `asyncio.Future` to a `tornado4.concurrent.Future`.
 
     .. versionadded:: 4.1
     """
-    tf = tornado.concurrent.Future()
-    tornado.concurrent.chain_future(asyncio_future, tf)
+    tf = tornado4.concurrent.Future()
+    tornado4.concurrent.chain_future(asyncio_future, tf)
     return tf
 
 
@@ -210,11 +210,11 @@ def to_asyncio_future(tornado_future):
 
     .. versionchanged:: 4.3
        Now accepts any yieldable object, not just
-       `tornado.concurrent.Future`.
+       `tornado4.concurrent.Future`.
     """
     tornado_future = convert_yielded(tornado_future)
     af = asyncio.Future()
-    tornado.concurrent.chain_future(tornado_future, af)
+    tornado4.concurrent.chain_future(tornado_future, af)
     return af
 
 
diff --git a/tornado/platform/auto.py b/tornado/platform/auto.py
index 1f4d700..bfa8bb9 100644
--- a/tornado/platform/auto.py
+++ b/tornado/platform/auto.py
@@ -16,11 +16,11 @@
 
 """Implementation of platform-specific functionality.
 
-For each function or class described in `tornado.platform.interface`,
+For each function or class described in `tornado4.platform.interface`,
 the appropriate platform-specific implementation exists in this module.
 Most code that needs access to this functionality should do e.g.::
 
-    from tornado.platform.auto import set_close_exec
+    from tornado4.platform.auto import set_close_exec
 """
 
 from __future__ import absolute_import, division, print_function
@@ -28,15 +28,15 @@ from __future__ import absolute_import, division, print_function
 import os
 
 if 'APPENGINE_RUNTIME' in os.environ:
-    from tornado.platform.common import Waker
+    from tornado4.platform.common import Waker
 
     def set_close_exec(fd):
         pass
 elif os.name == 'nt':
-    from tornado.platform.common import Waker
-    from tornado.platform.windows import set_close_exec
+    from tornado4.platform.common import Waker
+    from tornado4.platform.windows import set_close_exec
 else:
-    from tornado.platform.posix import set_close_exec, Waker
+    from tornado4.platform.posix import set_close_exec, Waker
 
 try:
     # monotime monkey-patches the time module to have a monotonic function
diff --git a/tornado/platform/caresresolver.py b/tornado/platform/caresresolver.py
index fd6e9d2..85240a9 100644
--- a/tornado/platform/caresresolver.py
+++ b/tornado/platform/caresresolver.py
@@ -2,9 +2,9 @@ from __future__ import absolute_import, division, print_function
 import pycares  # type: ignore
 import socket
 
-from tornado import gen
-from tornado.ioloop import IOLoop
-from tornado.netutil import Resolver, is_valid_ip
+from tornado4 import gen
+from tornado4.ioloop import IOLoop
+from tornado4.netutil import Resolver, is_valid_ip
 
 
 class CaresResolver(Resolver):
@@ -16,7 +16,7 @@ class CaresResolver(Resolver):
 
     c-ares fails to resolve some names when ``family`` is ``AF_UNSPEC``,
     so it is only recommended for use in ``AF_INET`` (i.e. IPv4).  This is
-    the default for ``tornado.simple_httpclient``, but other libraries
+    the default for ``tornado4.simple_httpclient``, but other libraries
     may default to ``AF_UNSPEC``.
 
     .. versionchanged:: 4.1
diff --git a/tornado/platform/common.py b/tornado/platform/common.py
index b597748..f2a10d2 100644
--- a/tornado/platform/common.py
+++ b/tornado/platform/common.py
@@ -5,8 +5,8 @@ import errno
 import socket
 import time
 
-from tornado.platform import interface
-from tornado.util import errno_from_exception
+from tornado4.platform import interface
+from tornado4.util import errno_from_exception
 
 
 def try_close(f):
diff --git a/tornado/platform/epoll.py b/tornado/platform/epoll.py
index 80bfd8a..438b1e9 100644
--- a/tornado/platform/epoll.py
+++ b/tornado/platform/epoll.py
@@ -18,7 +18,7 @@ from __future__ import absolute_import, division, print_function
 
 import select
 
-from tornado.ioloop import PollIOLoop
+from tornado4.ioloop import PollIOLoop
 
 
 class EPollIOLoop(PollIOLoop):
diff --git a/tornado/platform/interface.py b/tornado/platform/interface.py
index c0ef290..8ecb866 100644
--- a/tornado/platform/interface.py
+++ b/tornado/platform/interface.py
@@ -17,8 +17,8 @@
 """Interfaces for platform-specific functionality.
 
 This module exists primarily for documentation purposes and as base classes
-for other tornado.platform modules.  Most code should import the appropriate
-implementation from `tornado.platform.auto`.
+for other tornado4.platform modules.  Most code should import the appropriate
+implementation from `tornado4.platform.auto`.
 """
 
 from __future__ import absolute_import, division, print_function
@@ -32,7 +32,7 @@ def set_close_exec(fd):
 class Waker(object):
     """A socket-like object that can wake another thread from ``select()``.
 
-    The `~tornado.ioloop.IOLoop` will add the Waker's `fileno()` to
+    The `~tornado4.ioloop.IOLoop` will add the Waker's `fileno()` to
     its ``select`` (or ``epoll`` or ``kqueue``) calls.  When another
     thread wants to wake up the loop, it calls `wake`.  Once it has woken
     up, it will call `consume` to do any necessary per-wake cleanup.  When
diff --git a/tornado/platform/kqueue.py b/tornado/platform/kqueue.py
index 3a5d417..a85e34d 100644
--- a/tornado/platform/kqueue.py
+++ b/tornado/platform/kqueue.py
@@ -18,7 +18,7 @@ from __future__ import absolute_import, division, print_function
 
 import select
 
-from tornado.ioloop import IOLoop, PollIOLoop
+from tornado4.ioloop import IOLoop, PollIOLoop
 
 assert hasattr(select, 'kqueue'), 'kqueue not supported'
 
diff --git a/tornado/platform/posix.py b/tornado/platform/posix.py
index 9bf1f18..d8f4d77 100644
--- a/tornado/platform/posix.py
+++ b/tornado/platform/posix.py
@@ -21,7 +21,7 @@ from __future__ import absolute_import, division, print_function
 import fcntl
 import os
 
-from tornado.platform import common, interface
+from tornado4.platform import common, interface
 
 
 def set_close_exec(fd):
diff --git a/tornado/platform/select.py b/tornado/platform/select.py
index a18049f..ee52756 100644
--- a/tornado/platform/select.py
+++ b/tornado/platform/select.py
@@ -21,7 +21,7 @@ from __future__ import absolute_import, division, print_function
 
 import select
 
-from tornado.ioloop import IOLoop, PollIOLoop
+from tornado4.ioloop import IOLoop, PollIOLoop
 
 
 class _Select(object):
diff --git a/tornado/platform/twisted.py b/tornado/platform/twisted.py
index 0f9787e..3a36617 100644
--- a/tornado/platform/twisted.py
+++ b/tornado/platform/twisted.py
@@ -42,15 +42,15 @@ import twisted.names.resolve  # type: ignore
 
 from zope.interface import implementer  # type: ignore
 
-from tornado.concurrent import Future
-from tornado.escape import utf8
-from tornado import gen
-import tornado.ioloop
-from tornado.log import app_log
-from tornado.netutil import Resolver
-from tornado.stack_context import NullContext, wrap
-from tornado.ioloop import IOLoop
-from tornado.util import timedelta_to_seconds
+from tornado4.concurrent import Future
+from tornado4.escape import utf8
+from tornado4 import gen
+import tornado4.ioloop
+from tornado4.log import app_log
+from tornado4.netutil import Resolver
+from tornado4.stack_context import NullContext, wrap
+from tornado4.ioloop import IOLoop
+from tornado4.util import timedelta_to_seconds
 
 
 @implementer(IDelayedCall)
@@ -104,15 +104,15 @@ class TornadoReactor(PosixReactorBase):
     the Tornado IOLoop.  To use it, simply call `install` at the beginning
     of the application::
 
-        import tornado.platform.twisted
-        tornado.platform.twisted.install()
+        import tornado4.platform.twisted
+        tornado4.platform.twisted.install()
         from twisted.internet import reactor
 
     When the app is ready to start, call ``IOLoop.current().start()``
     instead of ``reactor.run()``.
 
     It is also possible to create a non-global reactor by calling
-    ``tornado.platform.twisted.TornadoReactor(io_loop)``.  However, if
+    ``tornado4.platform.twisted.TornadoReactor(io_loop)``.  However, if
     the `.IOLoop` and reactor are to be short-lived (such as those used in
     unit tests), additional cleanup may be required.  Specifically, it is
     recommended to call::
@@ -127,7 +127,7 @@ class TornadoReactor(PosixReactorBase):
     """
     def __init__(self, io_loop=None):
         if not io_loop:
-            io_loop = tornado.ioloop.IOLoop.current()
+            io_loop = tornado4.ioloop.IOLoop.current()
         self._io_loop = io_loop
         self._readers = {}  # map of reader objects to fd
         self._writers = {}  # map of writer objects to fd
@@ -351,7 +351,7 @@ def install(io_loop=None):
 
     """
     if not io_loop:
-        io_loop = tornado.ioloop.IOLoop.current()
+        io_loop = tornado4.ioloop.IOLoop.current()
     reactor = TornadoReactor(io_loop)
     from twisted.internet.main import installReactor  # type: ignore
     installReactor(reactor)
@@ -373,28 +373,28 @@ class _FD(object):
 
     def doRead(self):
         if not self.lost:
-            self.handler(self.fileobj, tornado.ioloop.IOLoop.READ)
+            self.handler(self.fileobj, tornado4.ioloop.IOLoop.READ)
 
     def doWrite(self):
         if not self.lost:
-            self.handler(self.fileobj, tornado.ioloop.IOLoop.WRITE)
+            self.handler(self.fileobj, tornado4.ioloop.IOLoop.WRITE)
 
     def connectionLost(self, reason):
         if not self.lost:
-            self.handler(self.fileobj, tornado.ioloop.IOLoop.ERROR)
+            self.handler(self.fileobj, tornado4.ioloop.IOLoop.ERROR)
             self.lost = True
 
     def logPrefix(self):
         return ''
 
 
-class TwistedIOLoop(tornado.ioloop.IOLoop):
+class TwistedIOLoop(tornado4.ioloop.IOLoop):
     """IOLoop implementation that runs on Twisted.
 
     `TwistedIOLoop` implements the Tornado IOLoop interface on top of
     the Twisted reactor. Recommended usage::
 
-        from tornado.platform.twisted import TwistedIOLoop
+        from tornado4.platform.twisted import TwistedIOLoop
         from twisted.internet import reactor
         TwistedIOLoop().install()
         # Set up your tornado application as usual using `IOLoop.instance`
@@ -404,11 +404,11 @@ class TwistedIOLoop(tornado.ioloop.IOLoop):
     ``TwistedIOLoops`` in the same process, you must pass a unique reactor
     when constructing each one.
 
-    Not compatible with `tornado.process.Subprocess.set_exit_callback`
+    Not compatible with `tornado4.process.Subprocess.set_exit_callback`
     because the ``SIGCHLD`` handlers used by Tornado and Twisted conflict
     with each other.
 
-    See also :meth:`tornado.ioloop.IOLoop.install` for general notes on
+    See also :meth:`tornado4.ioloop.IOLoop.install` for general notes on
     installing alternative IOLoops.
     """
     def initialize(self, reactor=None, **kwargs):
@@ -433,16 +433,16 @@ class TwistedIOLoop(tornado.ioloop.IOLoop):
             raise ValueError('fd %s added twice' % fd)
         fd, fileobj = self.split_fd(fd)
         self.fds[fd] = _FD(fd, fileobj, wrap(handler))
-        if events & tornado.ioloop.IOLoop.READ:
+        if events & tornado4.ioloop.IOLoop.READ:
             self.fds[fd].reading = True
             self.reactor.addReader(self.fds[fd])
-        if events & tornado.ioloop.IOLoop.WRITE:
+        if events & tornado4.ioloop.IOLoop.WRITE:
             self.fds[fd].writing = True
             self.reactor.addWriter(self.fds[fd])
 
     def update_handler(self, fd, events):
         fd, fileobj = self.split_fd(fd)
-        if events & tornado.ioloop.IOLoop.READ:
+        if events & tornado4.ioloop.IOLoop.READ:
             if not self.fds[fd].reading:
                 self.fds[fd].reading = True
                 self.reactor.addReader(self.fds[fd])
@@ -450,7 +450,7 @@ class TwistedIOLoop(tornado.ioloop.IOLoop):
             if self.fds[fd].reading:
                 self.fds[fd].reading = False
                 self.reactor.removeReader(self.fds[fd])
-        if events & tornado.ioloop.IOLoop.WRITE:
+        if events & tornado4.ioloop.IOLoop.WRITE:
             if not self.fds[fd].writing:
                 self.fds[fd].writing = True
                 self.reactor.addWriter(self.fds[fd])
@@ -518,8 +518,8 @@ class TwistedResolver(Resolver):
     This is a non-blocking and non-threaded resolver.  It is
     recommended only when threads cannot be used, since it has
     limitations compared to the standard ``getaddrinfo``-based
-    `~tornado.netutil.Resolver` and
-    `~tornado.netutil.ThreadedResolver`.  Specifically, it returns at
+    `~tornado4.netutil.Resolver` and
+    `~tornado4.netutil.ThreadedResolver`.  Specifically, it returns at
     most one result, and arguments other than ``host`` and ``family``
     are ignored.  It may fail to resolve when ``family`` is not
     ``socket.AF_UNSPEC``.
@@ -533,7 +533,7 @@ class TwistedResolver(Resolver):
         self.io_loop = io_loop or IOLoop.current()
         # partial copy of twisted.names.client.createResolver, which doesn't
         # allow for a reactor to be passed in.
-        self.reactor = tornado.platform.twisted.TornadoReactor(io_loop)
+        self.reactor = tornado4.platform.twisted.TornadoReactor(io_loop)
 
         host_resolver = twisted.names.hosts.Resolver('/etc/hosts')
         cache_resolver = twisted.names.cache.CacheResolver(reactor=self.reactor)
diff --git a/tornado/process.py b/tornado/process.py
index fae94f3..430defe 100644
--- a/tornado/process.py
+++ b/tornado/process.py
@@ -29,13 +29,13 @@ import time
 
 from binascii import hexlify
 
-from tornado.concurrent import Future
-from tornado import ioloop
-from tornado.iostream import PipeIOStream
-from tornado.log import gen_log
-from tornado.platform.auto import set_close_exec
-from tornado import stack_context
-from tornado.util import errno_from_exception, PY3
+from tornado4.concurrent import Future
+from tornado4 import ioloop
+from tornado4.iostream import PipeIOStream
+from tornado4.log import gen_log
+from tornado4.platform.auto import set_close_exec
+from tornado4 import stack_context
+from tornado4.util import errno_from_exception, PY3
 
 try:
     import multiprocessing
@@ -109,7 +109,7 @@ def fork_processes(num_processes, max_restarts=100):
     between any server code.
 
     Note that multiple processes are not compatible with the autoreload
-    module (or the ``autoreload=True`` option to `tornado.web.Application`
+    module (or the ``autoreload=True`` option to `tornado4.web.Application`
     which defaults to True when ``debug=True``).
     When using multiple processes, no IOLoops can be created or
     referenced until after the call to ``fork_processes``.
@@ -198,7 +198,7 @@ class Subprocess(object):
     additions:
 
     * ``stdin``, ``stdout``, and ``stderr`` may have the value
-      ``tornado.process.Subprocess.STREAM``, which will make the corresponding
+      ``tornado4.process.Subprocess.STREAM``, which will make the corresponding
       attribute of the resulting Subprocess a `.PipeIOStream`.
     * A new keyword argument ``io_loop`` may be used to pass in an IOLoop.
 
diff --git a/tornado/queues.py b/tornado/queues.py
index 141c539..6025ffe 100644
--- a/tornado/queues.py
+++ b/tornado/queues.py
@@ -27,9 +27,9 @@ from __future__ import absolute_import, division, print_function
 import collections
 import heapq
 
-from tornado import gen, ioloop
-from tornado.concurrent import Future
-from tornado.locks import Event
+from tornado4 import gen, ioloop
+from tornado4.concurrent import Future
+from tornado4.locks import Event
 
 __all__ = ['Queue', 'PriorityQueue', 'LifoQueue', 'QueueFull', 'QueueEmpty']
 
@@ -69,9 +69,9 @@ class Queue(object):
 
     .. testcode::
 
-        from tornado import gen
-        from tornado.ioloop import IOLoop
-        from tornado.queues import Queue
+        from tornado4 import gen
+        from tornado4.ioloop import IOLoop
+        from tornado4.queues import Queue
 
         q = Queue(maxsize=2)
 
@@ -166,7 +166,7 @@ class Queue(object):
     def put(self, item, timeout=None):
         """Put an item into the queue, perhaps waiting until there is room.
 
-        Returns a Future, which raises `tornado.gen.TimeoutError` after a
+        Returns a Future, which raises `tornado4.gen.TimeoutError` after a
         timeout.
         """
         try:
@@ -199,7 +199,7 @@ class Queue(object):
         """Remove and return an item from the queue.
 
         Returns a Future which resolves once an item is available, or raises
-        `tornado.gen.TimeoutError` after a timeout.
+        `tornado4.gen.TimeoutError` after a timeout.
         """
         future = Future()
         try:
@@ -248,7 +248,7 @@ class Queue(object):
     def join(self, timeout=None):
         """Block until all items in the queue are processed.
 
-        Returns a Future, which raises `tornado.gen.TimeoutError` after a
+        Returns a Future, which raises `tornado4.gen.TimeoutError` after a
         timeout.
         """
         return self._finished.wait(timeout)
@@ -307,7 +307,7 @@ class PriorityQueue(Queue):
 
     .. testcode::
 
-        from tornado.queues import PriorityQueue
+        from tornado4.queues import PriorityQueue
 
         q = PriorityQueue()
         q.put((1, 'medium-priority item'))
@@ -339,7 +339,7 @@ class LifoQueue(Queue):
 
     .. testcode::
 
-        from tornado.queues import LifoQueue
+        from tornado4.queues import LifoQueue
 
         q = LifoQueue()
         q.put(3)
diff --git a/tornado/routing.py b/tornado/routing.py
index 6762dc0..7e176a1 100644
--- a/tornado/routing.py
+++ b/tornado/routing.py
@@ -15,7 +15,7 @@
 """Flexible routing implementation.
 
 Tornado routes HTTP requests to appropriate handlers using `Router`
-class implementations. The `tornado.web.Application` class is a
+class implementations. The `tornado4.web.Application` class is a
 `Router` implementation and may be used directly, or the classes in
 this module may be used for additional flexibility. The `RuleRouter`
 class can match on more criteria than `.Application`, or the `Router`
@@ -180,11 +180,11 @@ from __future__ import absolute_import, division, print_function
 import re
 from functools import partial
 
-from tornado import httputil
-from tornado.httpserver import _CallableAdapter
-from tornado.escape import url_escape, url_unescape, utf8
-from tornado.log import app_log
-from tornado.util import basestring_type, import_object, re_unescape, unicode_type
+from tornado4 import httputil
+from tornado4.httpserver import _CallableAdapter
+from tornado4.escape import url_escape, url_unescape, utf8
+from tornado4.log import app_log
+from tornado4.util import basestring_type, import_object, re_unescape, unicode_type
 
 try:
     import typing  # noqa
diff --git a/tornado/simple_httpclient.py b/tornado/simple_httpclient.py
index c3b3d42..767fe7d 100644
--- a/tornado/simple_httpclient.py
+++ b/tornado/simple_httpclient.py
@@ -1,17 +1,17 @@
 #!/usr/bin/env python
 from __future__ import absolute_import, division, print_function
 
-from tornado.escape import utf8, _unicode
-from tornado import gen
-from tornado.httpclient import HTTPResponse, HTTPError, AsyncHTTPClient, main, _RequestProxy
-from tornado import httputil
-from tornado.http1connection import HTTP1Connection, HTTP1ConnectionParameters
-from tornado.iostream import StreamClosedError
-from tornado.netutil import Resolver, OverrideResolver, _client_ssl_defaults
-from tornado.log import gen_log
-from tornado import stack_context
-from tornado.tcpclient import TCPClient
-from tornado.util import PY3
+from tornado4.escape import utf8, _unicode
+from tornado4 import gen
+from tornado4.httpclient import HTTPResponse, HTTPError, AsyncHTTPClient, main, _RequestProxy
+from tornado4 import httputil
+from tornado4.http1connection import HTTP1Connection, HTTP1ConnectionParameters
+from tornado4.iostream import StreamClosedError
+from tornado4.netutil import Resolver, OverrideResolver, _client_ssl_defaults
+from tornado4.log import gen_log
+from tornado4 import stack_context
+from tornado4.tcpclient import TCPClient
+from tornado4.util import PY3
 
 import base64
 import collections
diff --git a/tornado/speedups.c b/tornado/speedups.c
index c59bda0..1623a01 100644
--- a/tornado/speedups.c
+++ b/tornado/speedups.c
@@ -47,6 +47,6 @@ PyInit_speedups(void) {
 #else  // Python 2.x
 PyMODINIT_FUNC
 initspeedups(void) {
-    Py_InitModule("tornado.speedups", methods);
+    Py_InitModule("tornado4.speedups", methods);
 }
 #endif
diff --git a/tornado/stack_context.py b/tornado/stack_context.py
index 61ae51f..e8d9a45 100644
--- a/tornado/stack_context.py
+++ b/tornado/stack_context.py
@@ -18,7 +18,7 @@
 that follows execution as it moves to other execution contexts.
 
 The motivating examples are to eliminate the need for explicit
-``async_callback`` wrappers (as in `tornado.web.RequestHandler`), and to
+``async_callback`` wrappers (as in `tornado4.web.RequestHandler`), and to
 allow some additional context to be kept for logging.
 
 This is slightly magic, but it's an extension of the idea that an
@@ -51,7 +51,7 @@ Most applications shouldn't have to work with `StackContext` directly.
 Here are a few rules of thumb for when it's necessary:
 
 * If you're writing an asynchronous library that doesn't rely on a
-  stack_context-aware library like `tornado.ioloop` or `tornado.iostream`
+  stack_context-aware library like `tornado4.ioloop` or `tornado4.iostream`
   (for example, if you're writing a thread pool), use
   `.stack_context.wrap()` before any asynchronous operations to capture the
   stack context from where the operation was started.
@@ -72,7 +72,7 @@ from __future__ import absolute_import, division, print_function
 import sys
 import threading
 
-from tornado.util import raise_exc_info
+from tornado4.util import raise_exc_info
 
 
 class StackContextInconsistentError(Exception):
diff --git a/tornado/tcpclient.py b/tornado/tcpclient.py
index bb5e9f3..6ce5fa0 100644
--- a/tornado/tcpclient.py
+++ b/tornado/tcpclient.py
@@ -21,12 +21,12 @@ from __future__ import absolute_import, division, print_function
 import functools
 import socket
 
-from tornado.concurrent import Future
-from tornado.ioloop import IOLoop
-from tornado.iostream import IOStream
-from tornado import gen
-from tornado.netutil import Resolver
-from tornado.platform.auto import set_close_exec
+from tornado4.concurrent import Future
+from tornado4.ioloop import IOLoop
+from tornado4.iostream import IOStream
+from tornado4 import gen
+from tornado4.netutil import Resolver
+from tornado4.platform.auto import set_close_exec
 
 _INITIAL_CONNECT_TIMEOUT = 0.3
 
diff --git a/tornado/tcpserver.py b/tornado/tcpserver.py
index f47ec89..7868758 100644
--- a/tornado/tcpserver.py
+++ b/tornado/tcpserver.py
@@ -21,13 +21,13 @@ import errno
 import os
 import socket
 
-from tornado import gen
-from tornado.log import app_log
-from tornado.ioloop import IOLoop
-from tornado.iostream import IOStream, SSLIOStream
-from tornado.netutil import bind_sockets, add_accept_handler, ssl_wrap_socket
-from tornado import process
-from tornado.util import errno_from_exception
+from tornado4 import gen
+from tornado4.log import app_log
+from tornado4.ioloop import IOLoop
+from tornado4.iostream import IOStream, SSLIOStream
+from tornado4.netutil import bind_sockets, add_accept_handler, ssl_wrap_socket
+from tornado4 import process
+from tornado4.util import errno_from_exception
 
 try:
     import ssl
@@ -42,9 +42,9 @@ class TCPServer(object):
     To use `TCPServer`, define a subclass which overrides the `handle_stream`
     method. For example, a simple echo server could be defined like this::
 
-      from tornado.tcpserver import TCPServer
-      from tornado.iostream import StreamClosedError
-      from tornado import gen
+      from tornado4.tcpserver import TCPServer
+      from tornado4.iostream import StreamClosedError
+      from tornado4 import gen
 
       class EchoServer(TCPServer):
           @gen.coroutine
@@ -88,17 +88,17 @@ class TCPServer(object):
     3. `add_sockets`: advanced multi-process::
 
             sockets = bind_sockets(8888)
-            tornado.process.fork_processes(0)
+            tornado4.process.fork_processes(0)
             server = TCPServer()
             server.add_sockets(sockets)
             IOLoop.current().start()
 
        The `add_sockets` interface is more complicated, but it can be
-       used with `tornado.process.fork_processes` to give you more
+       used with `tornado4.process.fork_processes` to give you more
        flexibility in when the fork happens.  `add_sockets` can
        also be used in single-process servers if you want to create
        your listening sockets in some way other than
-       `~tornado.netutil.bind_sockets`.
+       `~tornado4.netutil.bind_sockets`.
 
     .. versionadded:: 3.1
        The ``max_buffer_size`` argument.
@@ -146,9 +146,9 @@ class TCPServer(object):
         """Makes this server start accepting connections on the given sockets.
 
         The ``sockets`` parameter is a list of socket objects such as
-        those returned by `~tornado.netutil.bind_sockets`.
+        those returned by `~tornado4.netutil.bind_sockets`.
         `add_sockets` is typically used in combination with that
-        method and `tornado.process.fork_processes` to provide greater
+        method and `tornado4.process.fork_processes` to provide greater
         control over the initialization of a multi-process server.
         """
         if self.io_loop is None:
@@ -210,7 +210,7 @@ class TCPServer(object):
         between any server code.
 
         Note that multiple processes are not compatible with the autoreload
-        module (or the ``autoreload=True`` option to `tornado.web.Application`
+        module (or the ``autoreload=True`` option to `tornado4.web.Application`
         which defaults to True when ``debug=True``).
         When using multiple processes, no IOLoops can be created or
         referenced until after the call to ``TCPServer.start(n)``.
diff --git a/tornado/template.py b/tornado/template.py
index 3b2fa3f..01f9d38 100644
--- a/tornado/template.py
+++ b/tornado/template.py
@@ -82,7 +82,7 @@ We provide the functions `escape() <.xhtml_escape>`, `.url_escape()`,
 Typical applications do not create `Template` or `Loader` instances by
 hand, but instead use the `~.RequestHandler.render` and
 `~.RequestHandler.render_string` methods of
-`tornado.web.RequestHandler`, which load templates automatically based
+`tornado4.web.RequestHandler`, which load templates automatically based
 on the ``template_path`` `.Application` setting.
 
 Variable names beginning with ``_tt_`` are reserved by the template
@@ -168,12 +168,12 @@ if you need to include a literal ``{{``, ``{%``, or ``{#`` in the output.
     to include another template with an isolated namespace.
 
 ``{% module *expr* %}``
-    Renders a `~tornado.web.UIModule`.  The output of the ``UIModule`` is
+    Renders a `~tornado4.web.UIModule`.  The output of the ``UIModule`` is
     not escaped::
 
         {% module Template("foo.html", arg=42) %}
 
-    ``UIModules`` are a feature of the `tornado.web.RequestHandler`
+    ``UIModules`` are a feature of the `tornado4.web.RequestHandler`
     class (and specifically its ``render`` method) and will not work
     when the template system is used on its own in other contexts.
 
@@ -205,9 +205,9 @@ import posixpath
 import re
 import threading
 
-from tornado import escape
-from tornado.log import app_log
-from tornado.util import ObjectDict, exec_in, unicode_type, PY3
+from tornado4 import escape
+from tornado4.log import app_log
+from tornado4.util import ObjectDict, exec_in, unicode_type, PY3
 
 if PY3:
     from io import StringIO
@@ -260,7 +260,7 @@ class Template(object):
         :arg str template_string: the contents of the template file.
         :arg str name: the filename from which the template was loaded
             (used for error message).
-        :arg tornado.template.BaseLoader loader: the `~tornado.template.BaseLoader` responsible for this template,
+        :arg tornado4.template.BaseLoader loader: the `~tornado4.template.BaseLoader` responsible for this template,
             used to resolve ``{% include %}`` and ``{% extend %}``
             directives.
         :arg bool compress_whitespace: Deprecated since Tornado 4.3.
diff --git a/tornado/test/__main__.py b/tornado/test/__main__.py
index c78478c..0e1ec3d 100644
--- a/tornado/test/__main__.py
+++ b/tornado/test/__main__.py
@@ -1,12 +1,12 @@
-"""Shim to allow python -m tornado.test.
+"""Shim to allow python -m tornado4.test.
 
 This only works in python 2.7+.
 """
 from __future__ import absolute_import, division, print_function
 
-from tornado.test.runtests import all, main
+from tornado4.test.runtests import all, main
 
-# tornado.testing.main autodiscovery relies on 'all' being present in
+# tornado4.testing.main autodiscovery relies on 'all' being present in
 # the main module, so import it here even though it is not used directly.
 # The following line prevents a pyflakes warning.
 all = all
diff --git a/tornado/test/asyncio_test.py b/tornado/test/asyncio_test.py
index ae9125f..052b259 100644
--- a/tornado/test/asyncio_test.py
+++ b/tornado/test/asyncio_test.py
@@ -12,16 +12,16 @@
 
 from __future__ import absolute_import, division, print_function
 
-from tornado import gen
-from tornado.testing import AsyncTestCase, gen_test
-from tornado.test.util import unittest, skipBefore33, skipBefore35, exec_test
+from tornado4 import gen
+from tornado4.testing import AsyncTestCase, gen_test
+from tornado4.test.util import unittest, skipBefore33, skipBefore35, exec_test
 
 try:
-    from tornado.platform.asyncio import asyncio
+    from tornado4.platform.asyncio import asyncio
 except ImportError:
     asyncio = None
 else:
-    from tornado.platform.asyncio import AsyncIOLoop, to_asyncio_future
+    from tornado4.platform.asyncio import AsyncIOLoop, to_asyncio_future
     # This is used in dynamically-evaluated code, so silence pyflakes.
     to_asyncio_future
 
diff --git a/tornado/test/auth_test.py b/tornado/test/auth_test.py
index 400fc4f..9252c67 100644
--- a/tornado/test/auth_test.py
+++ b/tornado/test/auth_test.py
@@ -5,14 +5,14 @@
 
 
 from __future__ import absolute_import, division, print_function
-from tornado.auth import OpenIdMixin, OAuthMixin, OAuth2Mixin, TwitterMixin, AuthError, GoogleOAuth2Mixin, FacebookGraphMixin
-from tornado.concurrent import Future
-from tornado.escape import json_decode
-from tornado import gen
-from tornado.httputil import url_concat
-from tornado.log import gen_log
-from tornado.testing import AsyncHTTPTestCase, ExpectLog
-from tornado.web import RequestHandler, Application, asynchronous, HTTPError
+from tornado4.auth import OpenIdMixin, OAuthMixin, OAuth2Mixin, TwitterMixin, AuthError, GoogleOAuth2Mixin, FacebookGraphMixin
+from tornado4.concurrent import Future
+from tornado4.escape import json_decode
+from tornado4 import gen
+from tornado4.httputil import url_concat
+from tornado4.log import gen_log
+from tornado4.testing import AsyncHTTPTestCase, ExpectLog
+from tornado4.web import RequestHandler, Application, asynchronous, HTTPError
 
 
 class OpenIdClientLoginHandler(RequestHandler, OpenIdMixin):
diff --git a/tornado/test/concurrent_test.py b/tornado/test/concurrent_test.py
index 4d89f57..22b9d03 100644
--- a/tornado/test/concurrent_test.py
+++ b/tornado/test/concurrent_test.py
@@ -22,15 +22,15 @@ import socket
 import sys
 import traceback
 
-from tornado.concurrent import Future, return_future, ReturnValueIgnoredError, run_on_executor
-from tornado.escape import utf8, to_unicode
-from tornado import gen
-from tornado.iostream import IOStream
-from tornado.log import app_log
-from tornado import stack_context
-from tornado.tcpserver import TCPServer
-from tornado.testing import AsyncTestCase, ExpectLog, LogTrapTestCase, bind_unused_port, gen_test
-from tornado.test.util import unittest
+from tornado4.concurrent import Future, return_future, ReturnValueIgnoredError, run_on_executor
+from tornado4.escape import utf8, to_unicode
+from tornado4 import gen
+from tornado4.iostream import IOStream
+from tornado4.log import app_log
+from tornado4 import stack_context
+from tornado4.tcpserver import TCPServer
+from tornado4.testing import AsyncTestCase, ExpectLog, LogTrapTestCase, bind_unused_port, gen_test
+from tornado4.test.util import unittest
 
 
 try:
diff --git a/tornado/test/curl_httpclient_test.py b/tornado/test/curl_httpclient_test.py
index eb6f89d..d25cb23 100644
--- a/tornado/test/curl_httpclient_test.py
+++ b/tornado/test/curl_httpclient_test.py
@@ -3,13 +3,13 @@ from __future__ import absolute_import, division, print_function
 
 from hashlib import md5
 
-from tornado.escape import utf8
-from tornado.httpclient import HTTPRequest
-from tornado.stack_context import ExceptionStackContext
-from tornado.testing import AsyncHTTPTestCase
-from tornado.test import httpclient_test
-from tornado.test.util import unittest
-from tornado.web import Application, RequestHandler
+from tornado4.escape import utf8
+from tornado4.httpclient import HTTPRequest
+from tornado4.stack_context import ExceptionStackContext
+from tornado4.testing import AsyncHTTPTestCase
+from tornado4.test import httpclient_test
+from tornado4.test.util import unittest
+from tornado4.web import Application, RequestHandler
 
 
 try:
@@ -18,7 +18,7 @@ except ImportError:
     pycurl = None
 
 if pycurl is not None:
-    from tornado.curl_httpclient import CurlAsyncHTTPClient
+    from tornado4.curl_httpclient import CurlAsyncHTTPClient
 
 
 @unittest.skipIf(pycurl is None, "pycurl module not present")
diff --git a/tornado/test/escape_test.py b/tornado/test/escape_test.py
index 5ae75d0..c741b40 100644
--- a/tornado/test/escape_test.py
+++ b/tornado/test/escape_test.py
@@ -2,11 +2,11 @@
 
 
 from __future__ import absolute_import, division, print_function
-import tornado.escape
+import tornado4.escape
 
-from tornado.escape import utf8, xhtml_escape, xhtml_unescape, url_escape, url_unescape, to_unicode, json_decode, json_encode, squeeze, recursive_unicode
-from tornado.util import unicode_type
-from tornado.test.util import unittest
+from tornado4.escape import utf8, xhtml_escape, xhtml_unescape, url_escape, url_unescape, to_unicode, json_decode, json_encode, squeeze, recursive_unicode
+from tornado4.util import unicode_type
+from tornado4.test.util import unittest
 
 linkify_tests = [
     # (input, linkify_kwargs, expected_output)
@@ -135,7 +135,7 @@ linkify_tests = [
 class EscapeTestCase(unittest.TestCase):
     def test_linkify(self):
         for text, kwargs, html in linkify_tests:
-            linked = tornado.escape.linkify(text, **kwargs)
+            linked = tornado4.escape.linkify(text, **kwargs)
             self.assertEqual(linked, html)
 
     def test_xhtml_escape(self):
diff --git a/tornado/test/gen_test.py b/tornado/test/gen_test.py
index fea4c64..1a257ba 100644
--- a/tornado/test/gen_test.py
+++ b/tornado/test/gen_test.py
@@ -9,17 +9,17 @@ import textwrap
 import time
 import weakref
 
-from tornado.concurrent import return_future, Future
-from tornado.escape import url_escape
-from tornado.httpclient import AsyncHTTPClient
-from tornado.ioloop import IOLoop
-from tornado.log import app_log
-from tornado import stack_context
-from tornado.testing import AsyncHTTPTestCase, AsyncTestCase, ExpectLog, gen_test
-from tornado.test.util import unittest, skipOnTravis, skipBefore33, skipBefore35, skipNotCPython, exec_test
-from tornado.web import Application, RequestHandler, asynchronous, HTTPError
-
-from tornado import gen
+from tornado4.concurrent import return_future, Future
+from tornado4.escape import url_escape
+from tornado4.httpclient import AsyncHTTPClient
+from tornado4.ioloop import IOLoop
+from tornado4.log import app_log
+from tornado4 import stack_context
+from tornado4.testing import AsyncHTTPTestCase, AsyncTestCase, ExpectLog, gen_test
+from tornado4.test.util import unittest, skipOnTravis, skipBefore33, skipBefore35, skipNotCPython, exec_test
+from tornado4.web import Application, RequestHandler, asynchronous, HTTPError
+
+from tornado4 import gen
 
 try:
     from concurrent import futures
diff --git a/tornado/test/http1connection_test.py b/tornado/test/http1connection_test.py
index 8aaaaf3..e6fc623 100644
--- a/tornado/test/http1connection_test.py
+++ b/tornado/test/http1connection_test.py
@@ -2,12 +2,12 @@ from __future__ import absolute_import, division, print_function
 
 import socket
 
-from tornado.http1connection import HTTP1Connection
-from tornado.httputil import HTTPMessageDelegate
-from tornado.iostream import IOStream
-from tornado.locks import Event
-from tornado.netutil import add_accept_handler
-from tornado.testing import AsyncTestCase, bind_unused_port, gen_test
+from tornado4.http1connection import HTTP1Connection
+from tornado4.httputil import HTTPMessageDelegate
+from tornado4.iostream import IOStream
+from tornado4.locks import Event
+from tornado4.netutil import add_accept_handler
+from tornado4.testing import AsyncTestCase, bind_unused_port, gen_test
 
 
 class HTTP1ConnectionTest(AsyncTestCase):
diff --git a/tornado/test/httpclient_test.py b/tornado/test/httpclient_test.py
index 320454e..9ebb3c7 100644
--- a/tornado/test/httpclient_test.py
+++ b/tornado/test/httpclient_test.py
@@ -12,19 +12,19 @@ import threading
 import datetime
 from io import BytesIO
 
-from tornado.escape import utf8, native_str
-from tornado import gen
-from tornado.httpclient import HTTPRequest, HTTPResponse, _RequestProxy, HTTPError, HTTPClient
-from tornado.httpserver import HTTPServer
-from tornado.ioloop import IOLoop
-from tornado.iostream import IOStream
-from tornado.log import gen_log
-from tornado import netutil
-from tornado.stack_context import ExceptionStackContext, NullContext
-from tornado.testing import AsyncHTTPTestCase, bind_unused_port, gen_test, ExpectLog
-from tornado.test.util import unittest, skipOnTravis
-from tornado.web import Application, RequestHandler, url
-from tornado.httputil import format_timestamp, HTTPHeaders
+from tornado4.escape import utf8, native_str
+from tornado4 import gen
+from tornado4.httpclient import HTTPRequest, HTTPResponse, _RequestProxy, HTTPError, HTTPClient
+from tornado4.httpserver import HTTPServer
+from tornado4.ioloop import IOLoop
+from tornado4.iostream import IOStream
+from tornado4.log import gen_log
+from tornado4 import netutil
+from tornado4.stack_context import ExceptionStackContext, NullContext
+from tornado4.testing import AsyncHTTPTestCase, bind_unused_port, gen_test, ExpectLog
+from tornado4.test.util import unittest, skipOnTravis
+from tornado4.web import Application, RequestHandler, url
+from tornado4.httputil import format_timestamp, HTTPHeaders
 
 
 class HelloWorldHandler(RequestHandler):
diff --git a/tornado/test/httpserver_test.py b/tornado/test/httpserver_test.py
index 5da7271..301305c 100644
--- a/tornado/test/httpserver_test.py
+++ b/tornado/test/httpserver_test.py
@@ -2,19 +2,19 @@
 
 
 from __future__ import absolute_import, division, print_function
-from tornado import netutil
-from tornado.escape import json_decode, json_encode, utf8, _unicode, recursive_unicode, native_str
-from tornado import gen
-from tornado.http1connection import HTTP1Connection
-from tornado.httpserver import HTTPServer
-from tornado.httputil import HTTPHeaders, HTTPMessageDelegate, HTTPServerConnectionDelegate, ResponseStartLine
-from tornado.iostream import IOStream
-from tornado.log import gen_log
-from tornado.netutil import ssl_options_to_context
-from tornado.simple_httpclient import SimpleAsyncHTTPClient
-from tornado.testing import AsyncHTTPTestCase, AsyncHTTPSTestCase, AsyncTestCase, ExpectLog, gen_test
-from tornado.test.util import unittest, skipOnTravis
-from tornado.web import Application, RequestHandler, asynchronous, stream_request_body
+from tornado4 import netutil
+from tornado4.escape import json_decode, json_encode, utf8, _unicode, recursive_unicode, native_str
+from tornado4 import gen
+from tornado4.http1connection import HTTP1Connection
+from tornado4.httpserver import HTTPServer
+from tornado4.httputil import HTTPHeaders, HTTPMessageDelegate, HTTPServerConnectionDelegate, ResponseStartLine
+from tornado4.iostream import IOStream
+from tornado4.log import gen_log
+from tornado4.netutil import ssl_options_to_context
+from tornado4.simple_httpclient import SimpleAsyncHTTPClient
+from tornado4.testing import AsyncHTTPTestCase, AsyncHTTPSTestCase, AsyncTestCase, ExpectLog, gen_test
+from tornado4.test.util import unittest, skipOnTravis
+from tornado4.web import Application, RequestHandler, asynchronous, stream_request_body
 from contextlib import closing
 import datetime
 import gzip
@@ -362,7 +362,7 @@ class HTTPServerTest(AsyncHTTPTestCase):
         self.assertEqual(data, {})
 
     def test_double_slash(self):
-        # urlparse.urlsplit (which tornado.httpserver used to use
+        # urlparse.urlsplit (which tornado4.httpserver used to use
         # incorrectly) would parse paths beginning with "//" as
         # protocol-relative urls.
         response = self.fetch("//doubleslash")
diff --git a/tornado/test/httputil_test.py b/tornado/test/httputil_test.py
index d127856..4c663f2 100644
--- a/tornado/test/httputil_test.py
+++ b/tornado/test/httputil_test.py
@@ -3,11 +3,11 @@
 
 
 from __future__ import absolute_import, division, print_function
-from tornado.httputil import url_concat, parse_multipart_form_data, HTTPHeaders, format_timestamp, HTTPServerRequest, parse_request_start_line, parse_cookie
-from tornado.escape import utf8, native_str
-from tornado.log import gen_log
-from tornado.testing import ExpectLog
-from tornado.test.util import unittest
+from tornado4.httputil import url_concat, parse_multipart_form_data, HTTPHeaders, format_timestamp, HTTPServerRequest, parse_request_start_line, parse_cookie
+from tornado4.escape import utf8, native_str
+from tornado4.log import gen_log
+from tornado4.testing import ExpectLog
+from tornado4.test.util import unittest
 
 import copy
 import datetime
diff --git a/tornado/test/import_test.py b/tornado/test/import_test.py
index 88d02e0..fbde23d 100644
--- a/tornado/test/import_test.py
+++ b/tornado/test/import_test.py
@@ -1,6 +1,6 @@
 # flake8: noqa
 from __future__ import absolute_import, division, print_function
-from tornado.test.util import unittest
+from tornado4.test.util import unittest
 
 
 class ImportTest(unittest.TestCase):
@@ -8,32 +8,32 @@ class ImportTest(unittest.TestCase):
         # Some of our modules are not otherwise tested.  Import them
         # all (unless they have external dependencies) here to at
         # least ensure that there are no syntax errors.
-        import tornado.auth
-        import tornado.autoreload
-        import tornado.concurrent
-        import tornado.escape
-        import tornado.gen
-        import tornado.http1connection
-        import tornado.httpclient
-        import tornado.httpserver
-        import tornado.httputil
-        import tornado.ioloop
-        import tornado.iostream
-        import tornado.locale
-        import tornado.log
-        import tornado.netutil
-        import tornado.options
-        import tornado.process
-        import tornado.simple_httpclient
-        import tornado.stack_context
-        import tornado.tcpserver
-        import tornado.tcpclient
-        import tornado.template
-        import tornado.testing
-        import tornado.util
-        import tornado.web
-        import tornado.websocket
-        import tornado.wsgi
+        import tornado4.auth
+        import tornado4.autoreload
+        import tornado4.concurrent
+        import tornado4.escape
+        import tornado4.gen
+        import tornado4.http1connection
+        import tornado4.httpclient
+        import tornado4.httpserver
+        import tornado4.httputil
+        import tornado4.ioloop
+        import tornado4.iostream
+        import tornado4.locale
+        import tornado4.log
+        import tornado4.netutil
+        import tornado4.options
+        import tornado4.process
+        import tornado4.simple_httpclient
+        import tornado4.stack_context
+        import tornado4.tcpserver
+        import tornado4.tcpclient
+        import tornado4.template
+        import tornado4.testing
+        import tornado4.util
+        import tornado4.web
+        import tornado4.websocket
+        import tornado4.wsgi
 
     # for modules with dependencies, if those dependencies can be loaded,
     # load them too.
@@ -44,4 +44,4 @@ class ImportTest(unittest.TestCase):
         except ImportError:
             pass
         else:
-            import tornado.curl_httpclient
+            import tornado4.curl_httpclient
diff --git a/tornado/test/ioloop_test.py b/tornado/test/ioloop_test.py
index 1601813..c2a0084 100644
--- a/tornado/test/ioloop_test.py
+++ b/tornado/test/ioloop_test.py
@@ -11,13 +11,13 @@ import threading
 import time
 import types
 
-from tornado import gen
-from tornado.ioloop import IOLoop, TimeoutError, PollIOLoop, PeriodicCallback
-from tornado.log import app_log
-from tornado.platform.select import _Select
-from tornado.stack_context import ExceptionStackContext, StackContext, wrap, NullContext
-from tornado.testing import AsyncTestCase, bind_unused_port, ExpectLog
-from tornado.test.util import unittest, skipIfNonUnix, skipOnTravis, skipBefore35, exec_test
+from tornado4 import gen
+from tornado4.ioloop import IOLoop, TimeoutError, PollIOLoop, PeriodicCallback
+from tornado4.log import app_log
+from tornado4.platform.select import _Select
+from tornado4.stack_context import ExceptionStackContext, StackContext, wrap, NullContext
+from tornado4.testing import AsyncTestCase, bind_unused_port, ExpectLog
+from tornado4.test.util import unittest, skipIfNonUnix, skipOnTravis, skipBefore35, exec_test
 
 try:
     from concurrent import futures
diff --git a/tornado/test/iostream_test.py b/tornado/test/iostream_test.py
index b1d5f5d..ebd4fe6 100644
--- a/tornado/test/iostream_test.py
+++ b/tornado/test/iostream_test.py
@@ -1,16 +1,16 @@
 from __future__ import absolute_import, division, print_function
-from tornado.concurrent import Future
-from tornado import gen
-from tornado import netutil
-from tornado.iostream import IOStream, SSLIOStream, PipeIOStream, StreamClosedError
-from tornado.httputil import HTTPHeaders
-from tornado.log import gen_log, app_log
-from tornado.netutil import ssl_wrap_socket
-from tornado.stack_context import NullContext
-from tornado.tcpserver import TCPServer
-from tornado.testing import AsyncHTTPTestCase, AsyncHTTPSTestCase, AsyncTestCase, bind_unused_port, ExpectLog, gen_test
-from tornado.test.util import unittest, skipIfNonUnix, refusing_port, skipPypy3V58
-from tornado.web import RequestHandler, Application
+from tornado4.concurrent import Future
+from tornado4 import gen
+from tornado4 import netutil
+from tornado4.iostream import IOStream, SSLIOStream, PipeIOStream, StreamClosedError
+from tornado4.httputil import HTTPHeaders
+from tornado4.log import gen_log, app_log
+from tornado4.netutil import ssl_wrap_socket
+from tornado4.stack_context import NullContext
+from tornado4.tcpserver import TCPServer
+from tornado4.testing import AsyncHTTPTestCase, AsyncHTTPSTestCase, AsyncTestCase, bind_unused_port, ExpectLog, gen_test
+from tornado4.test.util import unittest, skipIfNonUnix, refusing_port, skipPypy3V58
+from tornado4.web import RequestHandler, Application
 import errno
 import logging
 import os
@@ -463,7 +463,7 @@ class TestIOStreamMixin(object):
     def test_read_until_close_with_error(self):
         server, client = self.make_iostream_pair()
         try:
-            with mock.patch('tornado.iostream.BaseIOStream._try_inline_read',
+            with mock.patch('tornado4.iostream.BaseIOStream._try_inline_read',
                             side_effect=IOError('boom')):
                 with self.assertRaisesRegexp(IOError, 'boom'):
                     client.read_until_close(self.stop)
diff --git a/tornado/test/locale_test.py b/tornado/test/locale_test.py
index d548ffb..38d99ab 100644
--- a/tornado/test/locale_test.py
+++ b/tornado/test/locale_test.py
@@ -5,10 +5,10 @@ import os
 import shutil
 import tempfile
 
-import tornado.locale
-from tornado.escape import utf8, to_unicode
-from tornado.test.util import unittest, skipOnAppEngine
-from tornado.util import unicode_type
+import tornado4.locale
+from tornado4.escape import utf8, to_unicode
+from tornado4.test.util import unittest, skipOnAppEngine
+from tornado4.util import unicode_type
 
 
 class TranslationLoaderTest(unittest.TestCase):
@@ -16,25 +16,25 @@ class TranslationLoaderTest(unittest.TestCase):
     SAVE_VARS = ['_translations', '_supported_locales', '_use_gettext']
 
     def clear_locale_cache(self):
-        if hasattr(tornado.locale.Locale, '_cache'):
-            del tornado.locale.Locale._cache
+        if hasattr(tornado4.locale.Locale, '_cache'):
+            del tornado4.locale.Locale._cache
 
     def setUp(self):
         self.saved = {}
         for var in TranslationLoaderTest.SAVE_VARS:
-            self.saved[var] = getattr(tornado.locale, var)
+            self.saved[var] = getattr(tornado4.locale, var)
         self.clear_locale_cache()
 
     def tearDown(self):
         for k, v in self.saved.items():
-            setattr(tornado.locale, k, v)
+            setattr(tornado4.locale, k, v)
         self.clear_locale_cache()
 
     def test_csv(self):
-        tornado.locale.load_translations(
+        tornado4.locale.load_translations(
             os.path.join(os.path.dirname(__file__), 'csv_translations'))
-        locale = tornado.locale.get("fr_FR")
-        self.assertTrue(isinstance(locale, tornado.locale.CSVLocale))
+        locale = tornado4.locale.get("fr_FR")
+        self.assertTrue(isinstance(locale, tornado4.locale.CSVLocale))
         self.assertEqual(locale.translate("school"), u"\u00e9cole")
 
     # tempfile.mkdtemp is not available on app engine.
@@ -52,19 +52,19 @@ class TranslationLoaderTest(unittest.TestCase):
             try:
                 with open(os.path.join(tmpdir, 'fr_FR.csv'), 'wb') as f:
                     f.write(char_data.encode(encoding))
-                tornado.locale.load_translations(tmpdir)
-                locale = tornado.locale.get('fr_FR')
-                self.assertIsInstance(locale, tornado.locale.CSVLocale)
+                tornado4.locale.load_translations(tmpdir)
+                locale = tornado4.locale.get('fr_FR')
+                self.assertIsInstance(locale, tornado4.locale.CSVLocale)
                 self.assertEqual(locale.translate("school"), u"\u00e9cole")
             finally:
                 shutil.rmtree(tmpdir)
 
     def test_gettext(self):
-        tornado.locale.load_gettext_translations(
+        tornado4.locale.load_gettext_translations(
             os.path.join(os.path.dirname(__file__), 'gettext_translations'),
             "tornado_test")
-        locale = tornado.locale.get("fr_FR")
-        self.assertTrue(isinstance(locale, tornado.locale.GettextLocale))
+        locale = tornado4.locale.get("fr_FR")
+        self.assertTrue(isinstance(locale, tornado4.locale.GettextLocale))
         self.assertEqual(locale.translate("school"), u"\u00e9cole")
         self.assertEqual(locale.pgettext("law", "right"), u"le droit")
         self.assertEqual(locale.pgettext("good", "right"), u"le bien")
@@ -76,7 +76,7 @@ class TranslationLoaderTest(unittest.TestCase):
 
 class LocaleDataTest(unittest.TestCase):
     def test_non_ascii_name(self):
-        name = tornado.locale.LOCALE_NAMES['es_LA']['name']
+        name = tornado4.locale.LOCALE_NAMES['es_LA']['name']
         self.assertTrue(isinstance(name, unicode_type))
         self.assertEqual(name, u'Espa\u00f1ol')
         self.assertEqual(utf8(name), b'Espa\xc3\xb1ol')
@@ -84,7 +84,7 @@ class LocaleDataTest(unittest.TestCase):
 
 class EnglishTest(unittest.TestCase):
     def test_format_date(self):
-        locale = tornado.locale.get('en_US')
+        locale = tornado4.locale.get('en_US')
         date = datetime.datetime(2013, 4, 28, 18, 35)
         self.assertEqual(locale.format_date(date, full_format=True),
                          'April 28, 2013 at 6:35 pm')
@@ -113,18 +113,18 @@ class EnglishTest(unittest.TestCase):
                          '%s %d, %d' % (locale._months[date.month - 1], date.day, date.year))
 
     def test_friendly_number(self):
-        locale = tornado.locale.get('en_US')
+        locale = tornado4.locale.get('en_US')
         self.assertEqual(locale.friendly_number(1000000), '1,000,000')
 
     def test_list(self):
-        locale = tornado.locale.get('en_US')
+        locale = tornado4.locale.get('en_US')
         self.assertEqual(locale.list([]), '')
         self.assertEqual(locale.list(['A']), 'A')
         self.assertEqual(locale.list(['A', 'B']), 'A and B')
         self.assertEqual(locale.list(['A', 'B', 'C']), 'A, B and C')
 
     def test_format_day(self):
-        locale = tornado.locale.get('en_US')
+        locale = tornado4.locale.get('en_US')
         date = datetime.datetime(2013, 4, 28, 18, 35)
         self.assertEqual(locale.format_day(date=date, dow=True), 'Sunday, April 28')
         self.assertEqual(locale.format_day(date=date, dow=False), 'April 28')
diff --git a/tornado/test/locks_test.py b/tornado/test/locks_test.py
index 844d4fb..c624d44 100644
--- a/tornado/test/locks_test.py
+++ b/tornado/test/locks_test.py
@@ -14,10 +14,10 @@
 from __future__ import absolute_import, division, print_function
 from datetime import timedelta
 
-from tornado import gen, locks
-from tornado.gen import TimeoutError
-from tornado.testing import gen_test, AsyncTestCase
-from tornado.test.util import unittest, skipBefore35, exec_test
+from tornado4 import gen, locks
+from tornado4.gen import TimeoutError
+from tornado4.testing import gen_test, AsyncTestCase
+from tornado4.test.util import unittest, skipBefore35, exec_test
 
 
 class ConditionTest(AsyncTestCase):
diff --git a/tornado/test/log_test.py b/tornado/test/log_test.py
index 888964e..e821f6c 100644
--- a/tornado/test/log_test.py
+++ b/tornado/test/log_test.py
@@ -25,11 +25,11 @@ import sys
 import tempfile
 import warnings
 
-from tornado.escape import utf8
-from tornado.log import LogFormatter, define_logging_options, enable_pretty_logging
-from tornado.options import OptionParser
-from tornado.test.util import unittest
-from tornado.util import basestring_type
+from tornado4.escape import utf8
+from tornado4.log import LogFormatter, define_logging_options, enable_pretty_logging
+from tornado4.options import OptionParser
+from tornado4.test.util import unittest
+from tornado4.util import basestring_type
 
 
 @contextlib.contextmanager
@@ -137,7 +137,7 @@ class EnablePrettyLoggingTest(unittest.TestCase):
         super(EnablePrettyLoggingTest, self).setUp()
         self.options = OptionParser()
         define_logging_options(self.options)
-        self.logger = logging.Logger('tornado.test.log_test.EnablePrettyLoggingTest')
+        self.logger = logging.Logger('tornado4.test.log_test.EnablePrettyLoggingTest')
         self.logger.propagate = False
 
     def test_log_file(self):
@@ -202,7 +202,7 @@ class LoggingOptionTest(unittest.TestCase):
         # logging module by default, but Tornado turns it on by default
         # so it is the easiest way to tell whether tornado's logging hooks
         # ran.
-        IMPORT = 'from tornado.options import options, parse_command_line'
+        IMPORT = 'from tornado4.options import options, parse_command_line'
         LOG_INFO = 'import logging; logging.info("hello")'
         program = ';'.join([IMPORT, statement, LOG_INFO])
         proc = subprocess.Popen(
diff --git a/tornado/test/netutil_test.py b/tornado/test/netutil_test.py
index 611d6ff..f7d4f77 100644
--- a/tornado/test/netutil_test.py
+++ b/tornado/test/netutil_test.py
@@ -8,10 +8,10 @@ from subprocess import Popen
 import sys
 import time
 
-from tornado.netutil import BlockingResolver, ThreadedResolver, is_valid_ip, bind_sockets
-from tornado.stack_context import ExceptionStackContext
-from tornado.testing import AsyncTestCase, gen_test, bind_unused_port
-from tornado.test.util import unittest, skipIfNoNetwork
+from tornado4.netutil import BlockingResolver, ThreadedResolver, is_valid_ip, bind_sockets
+from tornado4.stack_context import ExceptionStackContext
+from tornado4.testing import AsyncTestCase, gen_test, bind_unused_port
+from tornado4.test.util import unittest, skipIfNoNetwork
 
 try:
     from concurrent import futures
@@ -23,7 +23,7 @@ try:
 except ImportError:
     pycares = None
 else:
-    from tornado.platform.caresresolver import CaresResolver
+    from tornado4.platform.caresresolver import CaresResolver
 
 try:
     import twisted  # type: ignore
@@ -31,7 +31,7 @@ try:
 except ImportError:
     twisted = None
 else:
-    from tornado.platform.twisted import TwistedResolver
+    from tornado4.platform.twisted import TwistedResolver
 
 
 class _ResolverTestMixin(object):
@@ -135,7 +135,7 @@ class ThreadedResolverImportTest(unittest.TestCase):
         command = [
             sys.executable,
             '-c',
-            'import tornado.test.resolve_test_helper']
+            'import tornado4.test.resolve_test_helper']
 
         start = time.time()
         popen = Popen(command, preexec_fn=lambda: signal.alarm(TIMEOUT))
diff --git a/tornado/test/options_test.py b/tornado/test/options_test.py
index 1a0ac8f..62d732d 100644
--- a/tornado/test/options_test.py
+++ b/tornado/test/options_test.py
@@ -5,9 +5,9 @@ import datetime
 import os
 import sys
 
-from tornado.options import OptionParser, Error
-from tornado.util import basestring_type, PY3
-from tornado.test.util import unittest, subTest
+from tornado4.options import OptionParser, Error
+from tornado4.util import basestring_type, PY3
+from tornado4.test.util import unittest, subTest
 
 if PY3:
     from io import StringIO
diff --git a/tornado/test/process_test.py b/tornado/test/process_test.py
index 74c10ab..2f5bf1c 100644
--- a/tornado/test/process_test.py
+++ b/tornado/test/process_test.py
@@ -7,15 +7,15 @@ import os
 import signal
 import subprocess
 import sys
-from tornado.httpclient import HTTPClient, HTTPError
-from tornado.httpserver import HTTPServer
-from tornado.ioloop import IOLoop
-from tornado.log import gen_log
-from tornado.process import fork_processes, task_id, Subprocess
-from tornado.simple_httpclient import SimpleAsyncHTTPClient
-from tornado.testing import bind_unused_port, ExpectLog, AsyncTestCase, gen_test
-from tornado.test.util import unittest, skipIfNonUnix
-from tornado.web import RequestHandler, Application
+from tornado4.httpclient import HTTPClient, HTTPError
+from tornado4.httpserver import HTTPServer
+from tornado4.ioloop import IOLoop
+from tornado4.log import gen_log
+from tornado4.process import fork_processes, task_id, Subprocess
+from tornado4.simple_httpclient import SimpleAsyncHTTPClient
+from tornado4.testing import bind_unused_port, ExpectLog, AsyncTestCase, gen_test
+from tornado4.test.util import unittest, skipIfNonUnix
+from tornado4.web import RequestHandler, Application
 
 
 def skip_if_twisted():
diff --git a/tornado/test/queues_test.py b/tornado/test/queues_test.py
index 48ed5e2..510cabe 100644
--- a/tornado/test/queues_test.py
+++ b/tornado/test/queues_test.py
@@ -15,10 +15,10 @@ from __future__ import absolute_import, division, print_function
 from datetime import timedelta
 from random import random
 
-from tornado import gen, queues
-from tornado.gen import TimeoutError
-from tornado.testing import gen_test, AsyncTestCase
-from tornado.test.util import unittest, skipBefore35, exec_test
+from tornado4 import gen, queues
+from tornado4.gen import TimeoutError
+from tornado4.testing import gen_test, AsyncTestCase
+from tornado4.test.util import unittest, skipBefore35, exec_test
 
 
 class QueueBasicTest(AsyncTestCase):
diff --git a/tornado/test/resolve_test_helper.py b/tornado/test/resolve_test_helper.py
index 4296719..de81425 100644
--- a/tornado/test/resolve_test_helper.py
+++ b/tornado/test/resolve_test_helper.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, division, print_function
-from tornado.ioloop import IOLoop
-from tornado.netutil import ThreadedResolver
+from tornado4.ioloop import IOLoop
+from tornado4.netutil import ThreadedResolver
 
 # When this module is imported, it runs getaddrinfo on a thread. Since
 # the hostname is unicode, getaddrinfo attempts to import encodings.idna
diff --git a/tornado/test/routing_test.py b/tornado/test/routing_test.py
index a1040df..6f68c3c 100644
--- a/tornado/test/routing_test.py
+++ b/tornado/test/routing_test.py
@@ -13,11 +13,11 @@
 
 from __future__ import absolute_import, division, print_function
 
-from tornado.httputil import HTTPHeaders, HTTPMessageDelegate, HTTPServerConnectionDelegate, ResponseStartLine
-from tornado.routing import HostMatches, PathMatches, ReversibleRouter, Router, Rule, RuleRouter
-from tornado.testing import AsyncHTTPTestCase
-from tornado.web import Application, HTTPError, RequestHandler
-from tornado.wsgi import WSGIContainer
+from tornado4.httputil import HTTPHeaders, HTTPMessageDelegate, HTTPServerConnectionDelegate, ResponseStartLine
+from tornado4.routing import HostMatches, PathMatches, ReversibleRouter, Router, Rule, RuleRouter
+from tornado4.testing import AsyncHTTPTestCase
+from tornado4.web import Application, HTTPError, RequestHandler
+from tornado4.wsgi import WSGIContainer
 
 
 class BasicRouter(Router):
@@ -174,7 +174,7 @@ class RuleRouterTest(AsyncHTTPTestCase):
 
         app.add_handlers(".*", [
             (HostMatches("www.example.com"), [
-                (PathMatches("/first_handler"), "tornado.test.routing_test.SecondHandler", {}, "second_handler")
+                (PathMatches("/first_handler"), "tornado4.test.routing_test.SecondHandler", {}, "second_handler")
             ]),
             Rule(PathMatches("/first_handler"), FirstHandler, name="first_handler"),
             Rule(PathMatches("/request_callable"), request_callable),
@@ -205,10 +205,10 @@ class WSGIContainerTestCase(AsyncHTTPTestCase):
 
         class Handler(RequestHandler):
             def get(self, *args, **kwargs):
-                self.finish(self.reverse_url("tornado"))
+                self.finish(self.reverse_url("tornado4"))
 
         return RuleRouter([
-            (PathMatches("/tornado.*"), Application([(r"/tornado/test", Handler, {}, "tornado")])),
+            (PathMatches("/tornado4.*"), Application([(r"/tornado4/test", Handler, {}, "tornado4")])),
             (PathMatches("/wsgi"), wsgi_app),
         ])
 
@@ -217,8 +217,8 @@ class WSGIContainerTestCase(AsyncHTTPTestCase):
         return [b"WSGI"]
 
     def test_wsgi_container(self):
-        response = self.fetch("/tornado/test")
-        self.assertEqual(response.body, b"/tornado/test")
+        response = self.fetch("/tornado4/test")
+        self.assertEqual(response.body, b"/tornado4/test")
 
         response = self.fetch("/wsgi")
         self.assertEqual(response.body, b"WSGI")
diff --git a/tornado/test/runtests.py b/tornado/test/runtests.py
index b4b2569..f0988ec 100644
--- a/tornado/test/runtests.py
+++ b/tornado/test/runtests.py
@@ -2,17 +2,17 @@
 
 from __future__ import absolute_import, division, print_function
 import gc
-import locale  # system locale module, not tornado.locale
+import locale  # system locale module, not tornado4.locale
 import logging
 import operator
 import textwrap
 import sys
-from tornado.httpclient import AsyncHTTPClient
-from tornado.httpserver import HTTPServer
-from tornado.ioloop import IOLoop
-from tornado.netutil import Resolver
-from tornado.options import define, options, add_parse_callback
-from tornado.test.util import unittest
+from tornado4.httpclient import AsyncHTTPClient
+from tornado4.httpserver import HTTPServer
+from tornado4.ioloop import IOLoop
+from tornado4.netutil import Resolver
+from tornado4.options import define, options, add_parse_callback
+from tornado4.test.util import unittest
 
 try:
     reduce  # py2
@@ -20,42 +20,42 @@ except NameError:
     from functools import reduce  # py3
 
 TEST_MODULES = [
-    'tornado.httputil.doctests',
-    'tornado.iostream.doctests',
-    'tornado.util.doctests',
-    'tornado.test.asyncio_test',
-    'tornado.test.auth_test',
-    'tornado.test.concurrent_test',
-    'tornado.test.curl_httpclient_test',
-    'tornado.test.escape_test',
-    'tornado.test.gen_test',
-    'tornado.test.http1connection_test',
-    'tornado.test.httpclient_test',
-    'tornado.test.httpserver_test',
-    'tornado.test.httputil_test',
-    'tornado.test.import_test',
-    'tornado.test.ioloop_test',
-    'tornado.test.iostream_test',
-    'tornado.test.locale_test',
-    'tornado.test.locks_test',
-    'tornado.test.netutil_test',
-    'tornado.test.log_test',
-    'tornado.test.options_test',
-    'tornado.test.process_test',
-    'tornado.test.queues_test',
-    'tornado.test.routing_test',
-    'tornado.test.simple_httpclient_test',
-    'tornado.test.stack_context_test',
-    'tornado.test.tcpclient_test',
-    'tornado.test.tcpserver_test',
-    'tornado.test.template_test',
-    'tornado.test.testing_test',
-    'tornado.test.twisted_test',
-    'tornado.test.util_test',
-    'tornado.test.web_test',
-    'tornado.test.websocket_test',
-    'tornado.test.windows_test',
-    'tornado.test.wsgi_test',
+    'tornado4.httputil.doctests',
+    'tornado4.iostream.doctests',
+    'tornado4.util.doctests',
+    'tornado4.test.asyncio_test',
+    'tornado4.test.auth_test',
+    'tornado4.test.concurrent_test',
+    'tornado4.test.curl_httpclient_test',
+    'tornado4.test.escape_test',
+    'tornado4.test.gen_test',
+    'tornado4.test.http1connection_test',
+    'tornado4.test.httpclient_test',
+    'tornado4.test.httpserver_test',
+    'tornado4.test.httputil_test',
+    'tornado4.test.import_test',
+    'tornado4.test.ioloop_test',
+    'tornado4.test.iostream_test',
+    'tornado4.test.locale_test',
+    'tornado4.test.locks_test',
+    'tornado4.test.netutil_test',
+    'tornado4.test.log_test',
+    'tornado4.test.options_test',
+    'tornado4.test.process_test',
+    'tornado4.test.queues_test',
+    'tornado4.test.routing_test',
+    'tornado4.test.simple_httpclient_test',
+    'tornado4.test.stack_context_test',
+    'tornado4.test.tcpclient_test',
+    'tornado4.test.tcpserver_test',
+    'tornado4.test.template_test',
+    'tornado4.test.testing_test',
+    'tornado4.test.twisted_test',
+    'tornado4.test.util_test',
+    'tornado4.test.web_test',
+    'tornado4.test.websocket_test',
+    'tornado4.test.windows_test',
+    'tornado4.test.wsgi_test',
 ]
 
 
@@ -131,7 +131,7 @@ def main():
     warnings.filterwarnings("ignore", category=DeprecationWarning,
                             message=".*legacy __aiter__ protocol")
 
-    logging.getLogger("tornado.access").setLevel(logging.CRITICAL)
+    logging.getLogger("tornado4.access").setLevel(logging.CRITICAL)
 
     define('httpclient', type=str, default=None,
            callback=lambda s: AsyncHTTPClient.configure(
@@ -153,7 +153,7 @@ def main():
     def configure_ioloop():
         kwargs = {}
         if options.ioloop_time_monotonic:
-            from tornado.platform.auto import monotonic_time
+            from tornado4.platform.auto import monotonic_time
             if monotonic_time is None:
                 raise RuntimeError("monotonic clock not found")
             kwargs['time_func'] = monotonic_time
@@ -165,7 +165,7 @@ def main():
     add_parse_callback(
         lambda: logging.getLogger().handlers[0].addFilter(log_counter))
 
-    import tornado.testing
+    import tornado4.testing
     kwargs = {}
     if sys.version_info >= (3, 2):
         # HACK:  unittest.main will make its own changes to the warning
@@ -176,7 +176,7 @@ def main():
         kwargs['warnings'] = False
     kwargs['testRunner'] = TornadoTextTestRunner
     try:
-        tornado.testing.main(**kwargs)
+        tornado4.testing.main(**kwargs)
     finally:
         # The tests should run clean; consider it a failure if they logged
         # any warnings or errors. We'd like to ban info logs too, but
diff --git a/tornado/test/simple_httpclient_test.py b/tornado/test/simple_httpclient_test.py
index 0e75e53..e73fb33 100644
--- a/tornado/test/simple_httpclient_test.py
+++ b/tornado/test/simple_httpclient_test.py
@@ -11,20 +11,20 @@ import socket
 import ssl
 import sys
 
-from tornado.escape import to_unicode
-from tornado import gen
-from tornado.httpclient import AsyncHTTPClient
-from tornado.httputil import HTTPHeaders, ResponseStartLine
-from tornado.ioloop import IOLoop
-from tornado.log import gen_log
-from tornado.concurrent import Future
-from tornado.netutil import Resolver, bind_sockets
-from tornado.simple_httpclient import SimpleAsyncHTTPClient
-from tornado.test.httpclient_test import ChunkHandler, CountdownHandler, HelloWorldHandler, RedirectHandler
-from tornado.test import httpclient_test
-from tornado.testing import AsyncHTTPTestCase, AsyncHTTPSTestCase, AsyncTestCase, ExpectLog
-from tornado.test.util import skipOnTravis, skipIfNoIPv6, refusing_port, unittest, skipBefore35, exec_test
-from tornado.web import RequestHandler, Application, asynchronous, url, stream_request_body
+from tornado4.escape import to_unicode
+from tornado4 import gen
+from tornado4.httpclient import AsyncHTTPClient
+from tornado4.httputil import HTTPHeaders, ResponseStartLine
+from tornado4.ioloop import IOLoop
+from tornado4.log import gen_log
+from tornado4.concurrent import Future
+from tornado4.netutil import Resolver, bind_sockets
+from tornado4.simple_httpclient import SimpleAsyncHTTPClient
+from tornado4.test.httpclient_test import ChunkHandler, CountdownHandler, HelloWorldHandler, RedirectHandler
+from tornado4.test import httpclient_test
+from tornado4.testing import AsyncHTTPTestCase, AsyncHTTPSTestCase, AsyncTestCase, ExpectLog
+from tornado4.test.util import skipOnTravis, skipIfNoIPv6, refusing_port, unittest, skipBefore35, exec_test
+from tornado4.web import RequestHandler, Application, asynchronous, url, stream_request_body
 
 
 class SimpleHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase):
diff --git a/tornado/test/stack_context_test.py b/tornado/test/stack_context_test.py
index 59d2547..fea371e 100644
--- a/tornado/test/stack_context_test.py
+++ b/tornado/test/stack_context_test.py
@@ -1,13 +1,13 @@
 #!/usr/bin/env python
 from __future__ import absolute_import, division, print_function
 
-from tornado import gen
-from tornado.log import app_log
-from tornado.stack_context import (StackContext, wrap, NullContext, StackContextInconsistentError,
+from tornado4 import gen
+from tornado4.log import app_log
+from tornado4.stack_context import (StackContext, wrap, NullContext, StackContextInconsistentError,
                                    ExceptionStackContext, run_with_stack_context, _state)
-from tornado.testing import AsyncHTTPTestCase, AsyncTestCase, ExpectLog, gen_test
-from tornado.test.util import unittest
-from tornado.web import asynchronous, Application, RequestHandler
+from tornado4.testing import AsyncHTTPTestCase, AsyncTestCase, ExpectLog, gen_test
+from tornado4.test.util import unittest
+from tornado4.web import asynchronous, Application, RequestHandler
 import contextlib
 import functools
 import logging
diff --git a/tornado/test/tcpclient_test.py b/tornado/test/tcpclient_test.py
index 76206e8..d0519c8 100644
--- a/tornado/test/tcpclient_test.py
+++ b/tornado/test/tcpclient_test.py
@@ -20,13 +20,13 @@ from contextlib import closing
 import os
 import socket
 
-from tornado.concurrent import Future
-from tornado.netutil import bind_sockets, Resolver
-from tornado.queues import Queue
-from tornado.tcpclient import TCPClient, _Connector
-from tornado.tcpserver import TCPServer
-from tornado.testing import AsyncTestCase, gen_test
-from tornado.test.util import skipIfNoIPv6, unittest, refusing_port, skipIfNonUnix
+from tornado4.concurrent import Future
+from tornado4.netutil import bind_sockets, Resolver
+from tornado4.queues import Queue
+from tornado4.tcpclient import TCPClient, _Connector
+from tornado4.tcpserver import TCPServer
+from tornado4.testing import AsyncTestCase, gen_test
+from tornado4.test.util import skipIfNoIPv6, unittest, refusing_port, skipIfNonUnix
 
 # Fake address families for testing.  Used in place of AF_INET
 # and AF_INET6 because some installations do not have AF_INET6.
diff --git a/tornado/test/tcpserver_test.py b/tornado/test/tcpserver_test.py
index 9afb542..74b6e53 100644
--- a/tornado/test/tcpserver_test.py
+++ b/tornado/test/tcpserver_test.py
@@ -2,13 +2,13 @@ from __future__ import absolute_import, division, print_function
 
 import socket
 
-from tornado import gen
-from tornado.iostream import IOStream
-from tornado.log import app_log
-from tornado.stack_context import NullContext
-from tornado.tcpserver import TCPServer
-from tornado.test.util import skipBefore35, exec_test
-from tornado.testing import AsyncTestCase, ExpectLog, bind_unused_port, gen_test
+from tornado4 import gen
+from tornado4.iostream import IOStream
+from tornado4.log import app_log
+from tornado4.stack_context import NullContext
+from tornado4.tcpserver import TCPServer
+from tornado4.test.util import skipBefore35, exec_test
+from tornado4.testing import AsyncTestCase, ExpectLog, bind_unused_port, gen_test
 
 
 class TCPServerTest(AsyncTestCase):
diff --git a/tornado/test/template_test.py b/tornado/test/template_test.py
index 2f1e88c..da47578 100644
--- a/tornado/test/template_test.py
+++ b/tornado/test/template_test.py
@@ -4,10 +4,10 @@ import os
 import sys
 import traceback
 
-from tornado.escape import utf8, native_str, to_unicode
-from tornado.template import Template, DictLoader, ParseError, Loader
-from tornado.test.util import unittest, is_coverage_running
-from tornado.util import ObjectDict, unicode_type, PY3
+from tornado4.escape import utf8, native_str, to_unicode
+from tornado4.template import Template, DictLoader, ParseError, Loader
+from tornado4.test.util import unittest, is_coverage_running
+from tornado4.util import ObjectDict, unicode_type, PY3
 
 
 class TemplateTest(unittest.TestCase):
diff --git a/tornado/test/testing_test.py b/tornado/test/testing_test.py
index b3d6d8c..2d73401 100644
--- a/tornado/test/testing_test.py
+++ b/tornado/test/testing_test.py
@@ -2,10 +2,10 @@
 
 from __future__ import absolute_import, division, print_function
 
-from tornado import gen, ioloop
-from tornado.log import app_log
-from tornado.testing import AsyncTestCase, gen_test, ExpectLog
-from tornado.test.util import unittest, skipBefore35, exec_test
+from tornado4 import gen, ioloop
+from tornado4.log import app_log
+from tornado4.testing import AsyncTestCase, gen_test, ExpectLog
+from tornado4.test.util import unittest, skipBefore35, exec_test
 import contextlib
 import os
 import traceback
diff --git a/tornado/test/twisted_test.py b/tornado/test/twisted_test.py
index 1604ce5..4c8f319 100644
--- a/tornado/test/twisted_test.py
+++ b/tornado/test/twisted_test.py
@@ -28,17 +28,17 @@ import tempfile
 import threading
 import warnings
 
-from tornado.escape import utf8
-from tornado import gen
-from tornado.httpclient import AsyncHTTPClient
-from tornado.httpserver import HTTPServer
-from tornado.ioloop import IOLoop
-from tornado.platform.auto import set_close_exec
-from tornado.platform.select import SelectIOLoop
-from tornado.testing import bind_unused_port
-from tornado.test.util import unittest
-from tornado.util import import_object, PY3
-from tornado.web import RequestHandler, Application
+from tornado4.escape import utf8
+from tornado4 import gen
+from tornado4.httpclient import AsyncHTTPClient
+from tornado4.httpserver import HTTPServer
+from tornado4.ioloop import IOLoop
+from tornado4.platform.auto import set_close_exec
+from tornado4.platform.select import SelectIOLoop
+from tornado4.testing import bind_unused_port
+from tornado4.test.util import unittest
+from tornado4.util import import_object, PY3
+from tornado4.web import RequestHandler, Application
 
 try:
     import fcntl
@@ -46,7 +46,7 @@ try:
     from twisted.internet.interfaces import IReadDescriptor, IWriteDescriptor  # type: ignore
     from twisted.internet.protocol import Protocol  # type: ignore
     from twisted.python import log  # type: ignore
-    from tornado.platform.twisted import TornadoReactor, TwistedIOLoop
+    from tornado4.platform.twisted import TornadoReactor, TwistedIOLoop
     from zope.interface import implementer  # type: ignore
     have_twisted = True
 except ImportError:
@@ -617,7 +617,7 @@ if have_twisted:
 
         def make_test_subclass(test_class):
             class TornadoTest(test_class):  # type: ignore
-                _reactors = ["tornado.platform.twisted._TestReactor"]
+                _reactors = ["tornado4.platform.twisted._TestReactor"]
 
                 def setUp(self):
                     # Twisted's tests expect to be run from a temporary
diff --git a/tornado/test/util.py b/tornado/test/util.py
index 126d426..a307603 100644
--- a/tornado/test/util.py
+++ b/tornado/test/util.py
@@ -7,17 +7,17 @@ import socket
 import sys
 import textwrap
 
-from tornado.testing import bind_unused_port
+from tornado4.testing import bind_unused_port
 
 # Encapsulate the choice of unittest or unittest2 here.
-# To be used as 'from tornado.test.util import unittest'.
+# To be used as 'from tornado4.test.util import unittest'.
 if sys.version_info < (2, 7):
     # In py26, we must always use unittest2.
     import unittest2 as unittest  # type: ignore
 else:
     # Otherwise, use whichever version of unittest was imported in
-    # tornado.testing.
-    from tornado.testing import unittest
+    # tornado4.testing.
+    from tornado4.testing import unittest
 
 skipIfNonUnix = unittest.skipIf(os.name != 'posix' or sys.platform == 'cygwin',
                                 "non-unix platform")
@@ -125,7 +125,7 @@ def is_coverage_running():
 def subTest(test, *args, **kwargs):
     """Compatibility shim for unittest.TestCase.subTest.
 
-    Usage: ``with tornado.test.util.subTest(self, x=x):``
+    Usage: ``with tornado4.test.util.subTest(self, x=x):``
     """
     try:
         subTest = test.subTest  # py34+
diff --git a/tornado/test/util_test.py b/tornado/test/util_test.py
index 459cb9c..35aa8b2 100644
--- a/tornado/test/util_test.py
+++ b/tornado/test/util_test.py
@@ -4,10 +4,10 @@ import re
 import sys
 import datetime
 
-import tornado.escape
-from tornado.escape import utf8
-from tornado.util import raise_exc_info, Configurable, exec_in, ArgReplacer, timedelta_to_seconds, import_object, re_unescape, is_finalizing, PY3
-from tornado.test.util import unittest
+import tornado4.escape
+from tornado4.escape import utf8
+from tornado4.util import raise_exc_info, Configurable, exec_in, ArgReplacer, timedelta_to_seconds, import_object, re_unescape, is_finalizing, PY3
+from tornado4.test.util import unittest
 
 if PY3:
     from io import StringIO
@@ -187,19 +187,19 @@ class TimedeltaToSecondsTest(unittest.TestCase):
 
 class ImportObjectTest(unittest.TestCase):
     def test_import_member(self):
-        self.assertIs(import_object('tornado.escape.utf8'), utf8)
+        self.assertIs(import_object('tornado4.escape.utf8'), utf8)
 
     def test_import_member_unicode(self):
-        self.assertIs(import_object(u'tornado.escape.utf8'), utf8)
+        self.assertIs(import_object(u'tornado4.escape.utf8'), utf8)
 
     def test_import_module(self):
-        self.assertIs(import_object('tornado.escape'), tornado.escape)
+        self.assertIs(import_object('tornado4.escape'), tornado4.escape)
 
     def test_import_module_unicode(self):
         # The internal implementation of __import__ differs depending on
         # whether the thing being imported is a module or not.
         # This variant requires a byte string in python 2.
-        self.assertIs(import_object(u'tornado.escape'), tornado.escape)
+        self.assertIs(import_object(u'tornado4.escape'), tornado4.escape)
 
 
 class ReUnescapeTest(unittest.TestCase):
diff --git a/tornado/test/web_test.py b/tornado/test/web_test.py
index 013c2ac..c6bf85c 100644
--- a/tornado/test/web_test.py
+++ b/tornado/test/web_test.py
@@ -1,18 +1,18 @@
 from __future__ import absolute_import, division, print_function
-from tornado.concurrent import Future
-from tornado import gen
-from tornado.escape import json_decode, utf8, to_unicode, recursive_unicode, native_str, to_basestring
-from tornado.httputil import format_timestamp
-from tornado.ioloop import IOLoop
-from tornado.iostream import IOStream
-from tornado import locale
-from tornado.log import app_log, gen_log
-from tornado.simple_httpclient import SimpleAsyncHTTPClient
-from tornado.template import DictLoader
-from tornado.testing import AsyncHTTPTestCase, AsyncTestCase, ExpectLog, gen_test
-from tornado.test.util import unittest, skipBefore35, exec_test
-from tornado.util import ObjectDict, unicode_type, timedelta_to_seconds, PY3
-from tornado.web import RequestHandler, authenticated, Application, asynchronous, url, HTTPError, StaticFileHandler, _create_signature_v1, create_signed_value, decode_signed_value, ErrorHandler, UIModule, MissingArgumentError, stream_request_body, Finish, removeslash, addslash, RedirectHandler as WebRedirectHandler, get_signature_key_version, GZipContentEncoding
+from tornado4.concurrent import Future
+from tornado4 import gen
+from tornado4.escape import json_decode, utf8, to_unicode, recursive_unicode, native_str, to_basestring
+from tornado4.httputil import format_timestamp
+from tornado4.ioloop import IOLoop
+from tornado4.iostream import IOStream
+from tornado4 import locale
+from tornado4.log import app_log, gen_log
+from tornado4.simple_httpclient import SimpleAsyncHTTPClient
+from tornado4.template import DictLoader
+from tornado4.testing import AsyncHTTPTestCase, AsyncTestCase, ExpectLog, gen_test
+from tornado4.test.util import unittest, skipBefore35, exec_test
+from tornado4.util import ObjectDict, unicode_type, timedelta_to_seconds, PY3
+from tornado4.web import RequestHandler, authenticated, Application, asynchronous, url, HTTPError, StaticFileHandler, _create_signature_v1, create_signed_value, decode_signed_value, ErrorHandler, UIModule, MissingArgumentError, stream_request_body, Finish, removeslash, addslash, RedirectHandler as WebRedirectHandler, get_signature_key_version, GZipContentEncoding
 
 import binascii
 import contextlib
@@ -1784,7 +1784,7 @@ class MultipleExceptionTest(SimpleHandlerTestCase):
 
         @asynchronous
         def get(self):
-            from tornado.ioloop import IOLoop
+            from tornado4.ioloop import IOLoop
             IOLoop.current().add_callback(lambda: 1 / 0)
             IOLoop.current().add_callback(lambda: 1 / 0)
 
@@ -2057,8 +2057,8 @@ class HandlerByNameTest(WebTestCase):
     def get_handlers(self):
         # All three are equivalent.
         return [('/hello1', HelloHandler),
-                ('/hello2', 'tornado.test.web_test.HelloHandler'),
-                url('/hello3', 'tornado.test.web_test.HelloHandler'),
+                ('/hello2', 'tornado4.test.web_test.HelloHandler'),
+                url('/hello3', 'tornado4.test.web_test.HelloHandler'),
                 ]
 
     def test_handler_by_name(self):
diff --git a/tornado/test/websocket_test.py b/tornado/test/websocket_test.py
index 95a5ecd..f249d70 100644
--- a/tornado/test/websocket_test.py
+++ b/tornado/test/websocket_test.py
@@ -4,18 +4,18 @@ import functools
 import sys
 import traceback
 
-from tornado.concurrent import Future
-from tornado import gen
-from tornado.httpclient import HTTPError, HTTPRequest
-from tornado.log import gen_log, app_log
-from tornado.template import DictLoader
-from tornado.testing import AsyncHTTPTestCase, gen_test, bind_unused_port, ExpectLog
-from tornado.test.util import unittest, skipBefore35, exec_test
-from tornado.web import Application, RequestHandler
+from tornado4.concurrent import Future
+from tornado4 import gen
+from tornado4.httpclient import HTTPError, HTTPRequest
+from tornado4.log import gen_log, app_log
+from tornado4.template import DictLoader
+from tornado4.testing import AsyncHTTPTestCase, gen_test, bind_unused_port, ExpectLog
+from tornado4.test.util import unittest, skipBefore35, exec_test
+from tornado4.web import Application, RequestHandler
 
 try:
-    import tornado.websocket  # noqa
-    from tornado.util import _websocket_mask_python
+    import tornado4.websocket  # noqa
+    from tornado4.util import _websocket_mask_python
 except ImportError:
     # The unittest module presents misleading errors on ImportError
     # (it acts as if websocket_test could not be found, hiding the underlying
@@ -24,10 +24,10 @@ except ImportError:
     traceback.print_exc()
     raise
 
-from tornado.websocket import WebSocketHandler, websocket_connect, WebSocketError
+from tornado4.websocket import WebSocketHandler, websocket_connect, WebSocketError
 
 try:
-    from tornado import speedups
+    from tornado4 import speedups
 except ImportError:
     speedups = None
 
@@ -562,7 +562,7 @@ class PythonMaskFunctionTest(MaskFunctionMixin, unittest.TestCase):
         return _websocket_mask_python(mask, data)
 
 
-@unittest.skipIf(speedups is None, "tornado.speedups module not present")
+@unittest.skipIf(speedups is None, "tornado4.speedups module not present")
 class CythonMaskFunctionTest(MaskFunctionMixin, unittest.TestCase):
     def mask(self, mask, data):
         return speedups.websocket_mask(mask, data)
diff --git a/tornado/test/windows_test.py b/tornado/test/windows_test.py
index e5cb338..78ee9c8 100644
--- a/tornado/test/windows_test.py
+++ b/tornado/test/windows_test.py
@@ -4,7 +4,7 @@ import os
 import socket
 import unittest
 
-from tornado.platform.auto import set_close_exec
+from tornado4.platform.auto import set_close_exec
 
 skipIfNonWindows = unittest.skipIf(os.name != 'nt', 'non-windows platform')
 
diff --git a/tornado/test/wsgi_test.py b/tornado/test/wsgi_test.py
index e6ccc82..7603a8c 100644
--- a/tornado/test/wsgi_test.py
+++ b/tornado/test/wsgi_test.py
@@ -1,14 +1,14 @@
 from __future__ import absolute_import, division, print_function
 from wsgiref.validate import validator
 
-from tornado.escape import json_decode
-from tornado.test.httpserver_test import TypeCheckHandler
-from tornado.testing import AsyncHTTPTestCase
-from tornado.web import RequestHandler, Application
-from tornado.wsgi import WSGIApplication, WSGIContainer, WSGIAdapter
-
-from tornado.test import httpserver_test
-from tornado.test import web_test
+from tornado4.escape import json_decode
+from tornado4.test.httpserver_test import TypeCheckHandler
+from tornado4.testing import AsyncHTTPTestCase
+from tornado4.web import RequestHandler, Application
+from tornado4.wsgi import WSGIApplication, WSGIContainer, WSGIAdapter
+
+from tornado4.test import httpserver_test
+from tornado4.test import web_test
 
 
 class WSGIContainerTest(AsyncHTTPTestCase):
diff --git a/tornado/testing.py b/tornado/testing.py
index 82a3b93..0e90aa3 100644
--- a/tornado/testing.py
+++ b/tornado/testing.py
@@ -7,19 +7,19 @@
 * `ExpectLog` and `LogTrapTestCase`: Make test logs less spammy.
 
 * `main()`: A simple test runner (wrapper around unittest.main()) with support
-  for the tornado.autoreload module to rerun the tests when code changes.
+  for the tornado4.autoreload module to rerun the tests when code changes.
 """
 
 from __future__ import absolute_import, division, print_function
 
 try:
-    from tornado import gen
-    from tornado.httpclient import AsyncHTTPClient
-    from tornado.httpserver import HTTPServer
-    from tornado.simple_httpclient import SimpleAsyncHTTPClient
-    from tornado.ioloop import IOLoop, TimeoutError
-    from tornado import netutil
-    from tornado.process import Subprocess
+    from tornado4 import gen
+    from tornado4.httpclient import AsyncHTTPClient
+    from tornado4.httpserver import HTTPServer
+    from tornado4.simple_httpclient import SimpleAsyncHTTPClient
+    from tornado4.ioloop import IOLoop, TimeoutError
+    from tornado4 import netutil
+    from tornado4.process import Subprocess
 except ImportError:
     # These modules are not importable on app engine.  Parts of this module
     # won't work, but e.g. LogTrapTestCase and main() will.
@@ -30,9 +30,9 @@ except ImportError:
     netutil = None  # type: ignore
     SimpleAsyncHTTPClient = None  # type: ignore
     Subprocess = None  # type: ignore
-from tornado.log import gen_log, app_log
-from tornado.stack_context import ExceptionStackContext
-from tornado.util import raise_exc_info, basestring_type, PY3
+from tornado4.log import gen_log, app_log
+from tornado4.stack_context import ExceptionStackContext
+from tornado4.util import raise_exc_info, basestring_type, PY3
 import functools
 import inspect
 import logging
@@ -59,8 +59,8 @@ else:
     iscoroutine = iscoroutinefunction = lambda f: False
 
 # Tornado's own test suite requires the updated unittest module
-# (either py27+ or unittest2) so tornado.test.util enforces
-# this requirement, but for other users of tornado.testing we want
+# (either py27+ or unittest2) so tornado4.test.util enforces
+# this requirement, but for other users of tornado4.testing we want
 # to allow the older version if unitest2 is not available.
 if PY3:
     # On python 3, mixing unittest2 and unittest (including doctest)
@@ -136,7 +136,7 @@ class _TestMethodWrapper(object):
         result = self.orig_method(*args, **kwargs)
         if isinstance(result, GeneratorType) or iscoroutine(result):
             raise TypeError("Generator and coroutine test methods should be"
-                            " decorated with tornado.testing.gen_test")
+                            " decorated with tornado4.testing.gen_test")
         elif result is not None:
             raise ValueError("Return value from test method ignored: %r" %
                              result)
@@ -158,9 +158,9 @@ class AsyncTestCase(unittest.TestCase):
     complete by the time the test method returns.  This means that
     asynchronous code cannot be used in quite the same way as usual.
     To write test functions that use the same ``yield``-based patterns
-    used with the `tornado.gen` module, decorate your test methods
-    with `tornado.testing.gen_test` instead of
-    `tornado.gen.coroutine`.  This class also provides the `stop()`
+    used with the `tornado4.gen` module, decorate your test methods
+    with `tornado4.testing.gen_test` instead of
+    `tornado4.gen.coroutine`.  This class also provides the `stop()`
     and `wait()` methods for a more manual style of testing.  The test
     method itself must call ``self.wait()``, and asynchronous
     callbacks should call ``self.stop()`` to signal completion.
@@ -180,7 +180,7 @@ class AsyncTestCase(unittest.TestCase):
 
         # This test uses coroutine style.
         class MyTestCase(AsyncTestCase):
-            @tornado.testing.gen_test
+            @tornado4.testing.gen_test
             def test_http_fetch(self):
                 client = AsyncHTTPClient(self.io_loop)
                 response = yield client.fetch("http://www.tornadoweb.org")
@@ -343,7 +343,7 @@ class AsyncHTTPTestCase(AsyncTestCase):
     """A test case that starts up an HTTP server.
 
     Subclasses must override `get_app()`, which returns the
-    `tornado.web.Application` (or other `.HTTPServer` callback) to be tested.
+    `tornado4.web.Application` (or other `.HTTPServer` callback) to be tested.
     Tests will typically use the provided ``self.http_client`` to fetch
     URLs from this server.
 
@@ -390,7 +390,7 @@ class AsyncHTTPTestCase(AsyncTestCase):
 
     def get_app(self):
         """Should be overridden by subclasses to return a
-        `tornado.web.Application` or other `.HTTPServer` callback.
+        `tornado4.web.Application` or other `.HTTPServer` callback.
         """
         raise NotImplementedError()
 
@@ -567,7 +567,7 @@ class LogTrapTestCase(unittest.TestCase):
     This class assumes that only one log handler is configured and
     that it is a `~logging.StreamHandler`.  This is true for both
     `logging.basicConfig` and the "pretty logging" configured by
-    `tornado.options`.  It is not compatible with other log buffering
+    `tornado4.options`.  It is not compatible with other log buffering
     mechanisms, such as those provided by some test runners.
 
     .. deprecated:: 4.1
@@ -608,7 +608,7 @@ class ExpectLog(logging.Filter):
 
     Usage::
 
-        with ExpectLog('tornado.application', "Uncaught exception"):
+        with ExpectLog('tornado4.application', "Uncaught exception"):
             error_response = self.fetch("/some_page")
 
     .. versionchanged:: 4.3
@@ -662,7 +662,7 @@ def main(**kwargs):
 
     The easiest way to run a test is via the command line::
 
-        python -m tornado.testing tornado.test.stack_context_test
+        python -m tornado4.testing tornado4.test.stack_context_test
 
     See the standard library unittest module for ways in which tests can
     be specified.
@@ -670,22 +670,22 @@ def main(**kwargs):
     Projects with many tests may wish to define a test script like
     ``tornado/test/runtests.py``.  This script should define a method
     ``all()`` which returns a test suite and then call
-    `tornado.testing.main()`.  Note that even when a test script is
+    `tornado4.testing.main()`.  Note that even when a test script is
     used, the ``all()`` test suite may be overridden by naming a
     single test on the command line::
 
         # Runs all tests
-        python -m tornado.test.runtests
+        python -m tornado4.test.runtests
         # Runs one test
-        python -m tornado.test.runtests tornado.test.stack_context_test
+        python -m tornado4.test.runtests tornado4.test.stack_context_test
 
     Additional keyword arguments passed through to ``unittest.main()``.
-    For example, use ``tornado.testing.main(verbosity=2)``
+    For example, use ``tornado4.testing.main(verbosity=2)``
     to show many test details as they are run.
     See http://docs.python.org/library/unittest.html#unittest.main
     for full argument list.
     """
-    from tornado.options import define, options, parse_command_line
+    from tornado4.options import define, options, parse_command_line
 
     define('exception_on_interrupt', type=bool, default=True,
            help=("If true (default), ctrl-c raises a KeyboardInterrupt "
diff --git a/tornado/util.py b/tornado/util.py
index 981b94c..128c08b 100644
--- a/tornado/util.py
+++ b/tornado/util.py
@@ -149,14 +149,14 @@ def import_object(name):
     import_object('x') is equivalent to 'import x'.
     import_object('x.y.z') is equivalent to 'from x.y import z'.
 
-    >>> import tornado.escape
-    >>> import_object('tornado.escape') is tornado.escape
+    >>> import tornado4.escape
+    >>> import_object('tornado4.escape') is tornado4.escape
     True
-    >>> import_object('tornado.escape.utf8') is tornado.escape.utf8
+    >>> import_object('tornado4.escape.utf8') is tornado4.escape.utf8
     True
-    >>> import_object('tornado') is tornado
+    >>> import_object('tornado4') is tornado4
     True
-    >>> import_object('tornado.missing_module')
+    >>> import_object('tornado4.missing_module')
     Traceback (most recent call last):
         ...
     ImportError: No module named missing_module
@@ -463,7 +463,7 @@ if (os.environ.get('TORNADO_NO_EXTENSION') or
     _websocket_mask = _websocket_mask_python
 else:
     try:
-        from tornado.speedups import websocket_mask as _websocket_mask
+        from tornado4.speedups import websocket_mask as _websocket_mask
     except ImportError:
         if os.environ.get('TORNADO_EXTENSION') == '1':
             raise
diff --git a/tornado/web.py b/tornado/web.py
index e8d102b..b9d2447 100644
--- a/tornado/web.py
+++ b/tornado/web.py
@@ -14,7 +14,7 @@
 # License for the specific language governing permissions and limitations
 # under the License.
 
-"""``tornado.web`` provides a simple web framework with asynchronous
+"""``tornado4.web`` provides a simple web framework with asynchronous
 features that allow it to scale to large numbers of open connections,
 making it ideal for `long polling
 <http://en.wikipedia.org/wiki/Push_technology#Long_polling>`_.
@@ -23,19 +23,19 @@ Here is a simple "Hello, world" example app:
 
 .. testcode::
 
-    import tornado.ioloop
-    import tornado.web
+    import tornado4.ioloop
+    import tornado4.web
 
-    class MainHandler(tornado.web.RequestHandler):
+    class MainHandler(tornado4.web.RequestHandler):
         def get(self):
             self.write("Hello, world")
 
     if __name__ == "__main__":
-        application = tornado.web.Application([
+        application = tornado4.web.Application([
             (r"/", MainHandler),
         ])
         application.listen(8888)
-        tornado.ioloop.IOLoop.current().start()
+        tornado4.ioloop.IOLoop.current().start()
 
 .. testoutput::
    :hide:
@@ -74,26 +74,26 @@ import stat
 import sys
 import threading
 import time
-import tornado
+import tornado4
 import traceback
 import types
 from inspect import isclass
 from io import BytesIO
 
-from tornado.concurrent import Future
-from tornado import escape
-from tornado import gen
-from tornado import httputil
-from tornado import iostream
-from tornado import locale
-from tornado.log import access_log, app_log, gen_log
-from tornado import stack_context
-from tornado import template
-from tornado.escape import utf8, _unicode
-from tornado.routing import (AnyMatches, DefaultHostMatches, HostMatches,
+from tornado4.concurrent import Future
+from tornado4 import escape
+from tornado4 import gen
+from tornado4 import httputil
+from tornado4 import iostream
+from tornado4 import locale
+from tornado4.log import access_log, app_log, gen_log
+from tornado4 import stack_context
+from tornado4 import template
+from tornado4.escape import utf8, _unicode
+from tornado4.routing import (AnyMatches, DefaultHostMatches, HostMatches,
                              ReversibleRouter, Rule, ReversibleRuleRouter,
                              URLSpec)
-from tornado.util import (ObjectDict, raise_exc_info,
+from tornado4.util import (ObjectDict, raise_exc_info,
                           unicode_type, _websocket_mask, PY3)
 
 url = URLSpec
@@ -287,7 +287,7 @@ class RequestHandler(object):
     def clear(self):
         """Resets all headers and content for this response."""
         self._headers = httputil.HTTPHeaders({
-            "Server": "TornadoServer/%s" % tornado.version,
+            "Server": "TornadoServer/%s" % tornado4.version,
             "Content-Type": "text/html; charset=UTF-8",
             "Date": httputil.format_timestamp(time.time()),
         })
@@ -709,7 +709,7 @@ class RequestHandler(object):
         if not isinstance(chunk, (bytes, unicode_type, dict)):
             message = "write() only accepts bytes, unicode, and dict objects"
             if isinstance(chunk, list):
-                message += ". Lists not accepted for security reasons; see http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler.write"
+                message += ". Lists not accepted for security reasons; see http://www.tornadoweb.org/en/stable/web.html#tornado4.web.RequestHandler.write"
             raise TypeError(message)
         if isinstance(chunk, dict):
             chunk = escape.json_encode(chunk)
@@ -870,7 +870,7 @@ class RequestHandler(object):
         May be overridden by subclasses to add or modify values.
 
         The results of this method will be combined with additional
-        defaults in the `tornado.template` module and keyword arguments
+        defaults in the `tornado4.template` module and keyword arguments
         to `render` or `render_string`.
         """
         namespace = dict(
@@ -1093,8 +1093,8 @@ class RequestHandler(object):
 
         If None is returned, we fall back to `get_browser_locale()`.
 
-        This method should return a `tornado.locale.Locale` object,
-        most likely obtained via a call like ``tornado.locale.get("en")``
+        This method should return a `tornado4.locale.Locale` object,
+        most likely obtained via a call like ``tornado4.locale.get("en")``
         """
         return None
 
@@ -1174,7 +1174,7 @@ class RequestHandler(object):
 
         By default, we use the ``login_url`` application setting.
         """
-        self.require_setting("login_url", "@tornado.web.authenticated")
+        self.require_setting("login_url", "@tornado4.web.authenticated")
         return self.application.settings["login_url"]
 
     def get_template_path(self):
@@ -1574,9 +1574,9 @@ class RequestHandler(object):
         """Override to customize logging of uncaught exceptions.
 
         By default logs instances of `HTTPError` as warnings without
-        stack traces (on the ``tornado.general`` logger), and all
+        stack traces (on the ``tornado4.general`` logger), and all
         other exceptions as errors with stack traces (on the
-        ``tornado.application`` logger).
+        ``tornado4.application`` logger).
 
         .. versionadded:: 3.1
         """
@@ -1660,7 +1660,7 @@ def asynchronous(method):
        is an error. Such return values were previously ignored silently.
     """
     # Delay the IOLoop import because it's not available on app engine.
-    from tornado.ioloop import IOLoop
+    from tornado4.ioloop import IOLoop
 
     @functools.wraps(method)
     def wrapper(self, *args, **kwargs):
@@ -1869,7 +1869,7 @@ class Application(ReversibleRouter):
     ``static_handler_class`` setting.
 
     .. versionchanged:: 4.5
-       Integration with the new `tornado.routing` module.
+       Integration with the new `tornado4.routing` module.
     """
     def __init__(self, handlers=None, default_host=None, transforms=None,
                  **settings):
@@ -1915,7 +1915,7 @@ class Application(ReversibleRouter):
 
         # Automatically reload modified modules
         if self.settings.get('autoreload'):
-            from tornado import autoreload
+            from tornado4 import autoreload
             autoreload.start()
 
     def listen(self, port, address="", **kwargs):
@@ -1939,7 +1939,7 @@ class Application(ReversibleRouter):
         """
         # import is here rather than top level because HTTPServer
         # is not importable on appengine
-        from tornado.httpserver import HTTPServer
+        from tornado4.httpserver import HTTPServer
         server = HTTPServer(self, **kwargs)
         server.listen(port, address)
         return server
@@ -2757,13 +2757,13 @@ class FallbackHandler(RequestHandler):
 
     The fallback is a callable object that accepts an
     `~.httputil.HTTPServerRequest`, such as an `Application` or
-    `tornado.wsgi.WSGIContainer`.  This is most useful to use both
+    `tornado4.wsgi.WSGIContainer`.  This is most useful to use both
     Tornado ``RequestHandlers`` and WSGI in the same server.  Typical
     usage::
 
-        wsgi_app = tornado.wsgi.WSGIContainer(
+        wsgi_app = tornado4.wsgi.WSGIContainer(
             django.core.handlers.wsgi.WSGIHandler())
-        application = tornado.web.Application([
+        application = tornado4.web.Application([
             (r"/foo", FooHandler),
             (r".*", FallbackHandler, dict(fallback=wsgi_app),
         ])
diff --git a/tornado/websocket.py b/tornado/websocket.py
index 0e9d339..01d42e6 100644
--- a/tornado/websocket.py
+++ b/tornado/websocket.py
@@ -24,19 +24,19 @@ import collections
 import hashlib
 import os
 import struct
-import tornado.escape
-import tornado.web
+import tornado4.escape
+import tornado4.web
 import zlib
 
-from tornado.concurrent import TracebackFuture
-from tornado.escape import utf8, native_str, to_unicode
-from tornado import gen, httpclient, httputil
-from tornado.ioloop import IOLoop, PeriodicCallback
-from tornado.iostream import StreamClosedError
-from tornado.log import gen_log, app_log
-from tornado import simple_httpclient
-from tornado.tcpclient import TCPClient
-from tornado.util import _websocket_mask, PY3
+from tornado4.concurrent import TracebackFuture
+from tornado4.escape import utf8, native_str, to_unicode
+from tornado4 import gen, httpclient, httputil
+from tornado4.ioloop import IOLoop, PeriodicCallback
+from tornado4.iostream import StreamClosedError
+from tornado4.log import gen_log, app_log
+from tornado4 import simple_httpclient
+from tornado4.tcpclient import TCPClient
+from tornado4.util import _websocket_mask, PY3
 
 if PY3:
     from urllib.parse import urlparse  # py2
@@ -57,7 +57,7 @@ class WebSocketClosedError(WebSocketError):
     pass
 
 
-class WebSocketHandler(tornado.web.RequestHandler):
+class WebSocketHandler(tornado4.web.RequestHandler):
     """Subclass this class to create a basic WebSocket handler.
 
     Override `on_message` to handle incoming messages, and use
@@ -66,8 +66,8 @@ class WebSocketHandler(tornado.web.RequestHandler):
     connections.
 
     Custom upgrade response headers can be sent by overriding
-    `~tornado.web.RequestHandler.set_default_headers` or
-    `~tornado.web.RequestHandler.prepare`.
+    `~tornado4.web.RequestHandler.set_default_headers` or
+    `~tornado4.web.RequestHandler.prepare`.
 
     See http://dev.w3.org/html5/websockets/ for details on the
     JavaScript interface.  The protocol is specified at
@@ -78,7 +78,7 @@ class WebSocketHandler(tornado.web.RequestHandler):
 
     .. testcode::
 
-      class EchoWebSocket(tornado.websocket.WebSocketHandler):
+      class EchoWebSocket(tornado4.websocket.WebSocketHandler):
           def open(self):
               print("WebSocket opened")
 
@@ -146,7 +146,7 @@ class WebSocketHandler(tornado.web.RequestHandler):
         self.stream = None
         self._on_close_called = False
 
-    @tornado.web.asynchronous
+    @tornado4.web.asynchronous
     def get(self, *args, **kwargs):
         self.open_args = args
         self.open_kwargs = kwargs
@@ -248,7 +248,7 @@ class WebSocketHandler(tornado.web.RequestHandler):
         if self.ws_connection is None:
             raise WebSocketClosedError()
         if isinstance(message, dict):
-            message = tornado.escape.json_encode(message)
+            message = tornado4.escape.json_encode(message)
         return self.ws_connection.write_message(message, binary=binary)
 
     def select_subprotocol(self, subprotocols):
@@ -291,9 +291,9 @@ class WebSocketHandler(tornado.web.RequestHandler):
     def open(self, *args, **kwargs):
         """Invoked when a new WebSocket is opened.
 
-        The arguments to `open` are extracted from the `tornado.web.URLSpec`
+        The arguments to `open` are extracted from the `tornado4.web.URLSpec`
         regular expression, just like the arguments to
-        `tornado.web.RequestHandler.get`.
+        `tornado4.web.RequestHandler.get`.
         """
         pass
 
@@ -524,7 +524,7 @@ class _PerMessageDeflateCompressor(object):
         self._max_wbits = max_wbits
 
         if compression_options is None or 'compression_level' not in compression_options:
-            self._compression_level = tornado.web.GZipContentEncoding.GZIP_LEVEL
+            self._compression_level = tornado4.web.GZipContentEncoding.GZIP_LEVEL
         else:
             self._compression_level = compression_options['compression_level']
 
@@ -783,7 +783,7 @@ class WebSocketProtocol13(WebSocketProtocol):
             opcode = 0x2
         else:
             opcode = 0x1
-        message = tornado.escape.utf8(message)
+        message = tornado4.escape.utf8(message)
         assert isinstance(message, bytes)
         self._message_bytes_out += len(message)
         flags = 0
diff --git a/tornado/wsgi.py b/tornado/wsgi.py
index 68a7615..39de743 100644
--- a/tornado/wsgi.py
+++ b/tornado/wsgi.py
@@ -20,7 +20,7 @@ WSGI is the Python standard for web servers, and allows for interoperability
 between Tornado and other Python web frameworks and servers.  This module
 provides WSGI support in two ways:
 
-* `WSGIAdapter` converts a `tornado.web.Application` to the WSGI application
+* `WSGIAdapter` converts a `tornado4.web.Application` to the WSGI application
   interface.  This is useful for running a Tornado app on another
   HTTP server, such as Google App Engine.  See the `WSGIAdapter` class
   documentation for limitations that apply.
@@ -33,15 +33,15 @@ from __future__ import absolute_import, division, print_function
 
 import sys
 from io import BytesIO
-import tornado
+import tornado4 as tornado
 
-from tornado.concurrent import Future
-from tornado import escape
-from tornado import httputil
-from tornado.log import access_log
-from tornado import web
-from tornado.escape import native_str
-from tornado.util import unicode_type, PY3
+from tornado4.concurrent import Future
+from tornado4 import escape
+from tornado4 import httputil
+from tornado4.log import access_log
+from tornado4 import web
+from tornado4.escape import native_str
+from tornado4.util import unicode_type, PY3
 
 
 if PY3:
@@ -51,7 +51,7 @@ else:
 
 # PEP 3333 specifies that WSGI on python 3 generally deals with byte strings
 # that are smuggled inside objects of type unicode (via the latin1 encoding).
-# These functions are like those in the tornado.escape module, but defined
+# These functions are like those in the tornado4.escape module, but defined
 # here to minimize the temptation to use them in non-wsgi contexts.
 if str is unicode_type:
     def to_wsgi_str(s):
@@ -72,7 +72,7 @@ else:
 
 
 class WSGIApplication(web.Application):
-    """A WSGI equivalent of `tornado.web.Application`.
+    """A WSGI equivalent of `tornado4.web.Application`.
 
     .. deprecated:: 4.0
 
@@ -151,23 +151,23 @@ class _WSGIRequestContext(object):
 
 
 class WSGIAdapter(object):
-    """Converts a `tornado.web.Application` instance into a WSGI application.
+    """Converts a `tornado4.web.Application` instance into a WSGI application.
 
     Example usage::
 
-        import tornado.web
-        import tornado.wsgi
+        import tornado4.web
+        import tornado4.wsgi
         import wsgiref.simple_server
 
-        class MainHandler(tornado.web.RequestHandler):
+        class MainHandler(tornado4.web.RequestHandler):
             def get(self):
                 self.write("Hello, world")
 
         if __name__ == "__main__":
-            application = tornado.web.Application([
+            application = tornado4.web.Application([
                 (r"/", MainHandler),
             ])
-            wsgi_app = tornado.wsgi.WSGIAdapter(application)
+            wsgi_app = tornado4.wsgi.WSGIAdapter(application)
             server = wsgiref.simple_server.make_server('', 8888, wsgi_app)
             server.serve_forever()
 
@@ -178,7 +178,7 @@ class WSGIAdapter(object):
 
     In WSGI mode asynchronous methods are not supported.  This means
     that it is not possible to use `.AsyncHTTPClient`, or the
-    `tornado.auth` or `tornado.websocket` modules.
+    `tornado4.auth` or `tornado4.websocket` modules.
 
     .. versionadded:: 4.0
     """
@@ -250,15 +250,15 @@ class WSGIContainer(object):
             start_response(status, response_headers)
             return ["Hello world!\n"]
 
-        container = tornado.wsgi.WSGIContainer(simple_app)
-        http_server = tornado.httpserver.HTTPServer(container)
+        container = tornado4.wsgi.WSGIContainer(simple_app)
+        http_server = tornado4.httpserver.HTTPServer(container)
         http_server.listen(8888)
-        tornado.ioloop.IOLoop.current().start()
+        tornado4.ioloop.IOLoop.current().start()
 
     This class is intended to let other frameworks (Django, web.py, etc)
     run on the Tornado HTTP server and I/O loop.
 
-    The `tornado.web.FallbackHandler` class is often useful for mixing
+    The `tornado4.web.FallbackHandler` class is often useful for mixing
     Tornado and WSGI apps in the same server.  See
     https://github.com/bdarnell/django-tornado-demo for a complete example.
     """
@@ -307,7 +307,7 @@ class WSGIContainer(object):
 
     @staticmethod
     def environ(request):
-        """Converts a `tornado.httputil.HTTPServerRequest` to a WSGI environment.
+        """Converts a `tornado4.httputil.HTTPServerRequest` to a WSGI environment.
         """
         hostport = request.host.split(":")
         if len(hostport) == 2:
